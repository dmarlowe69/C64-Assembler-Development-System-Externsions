;*********************************;;         COMPARE64;      COMPARE.C64 V072882;COMPARE PRG FILE FROM ASSEMBLER64;        BUILD PROCESS; (C) 1982 BY COMMODORE MACHINES;;  WRITTEN BY DENTON MARLOWE;*********************************; MAIN BODY OF CODE;*********************************; ZEROPAGE USAGE EQUATES;*********************************STATUS=$90         ;STATUS BYTELA    =$B8         ;CURRENT LOGICAL DEVICE NUMBERSA    =$B9         ;CURRENT SECONDARY ADDRESSFA    =$BA         ;CURRENT DEVICE NUMBERZEROPG=$FB         ;ZERO PAGE POINTERZEROUR=$FD         ;ZERO PAGE POINTER;*********************************; KERNAL JMUP TABLE EQUATES;*********************************TALKSA=$FF96       ;SERIAL TALK SAIECIN =$FFA5       ;SERIAL INUNTALK=$FFAB       ;SERIAL UNTALKSTOP  =$FFE1       ;CHECK FOR STOPTALK  =$FFB4       ;SERIAL TALKSETLFS=$FFBA       ;SET LOGICAL FILESETNAM=$FFBD       ;SET FILENAMEOPEN  =$FFC0       ;OPEN FILECLOSE =$FFC3       ;CLOSE LOGICAL FILECHKIN =$FFC6       ;OPEN INPUT CHANNELCHKOUT=$FFC9       ;OPEN OUTPUT CHANNELCLRCHN=$FFCC       ;RESET I/O CHANNELSCHRIN =$FFCF       ;GET KEYBOARD INPUTCHROUT=$FFD2       ;OUTPUT CHARACTERREADST=$FFB7       ;READ I/O STATUS;*********************************;; OBJ2PRG ENTRY POINT;;*********************************COMPAR =*       JSR CLRCHN    ;RSET I/O       LDA #$00      ;ZERO BYTE       STA STATUS    ;I/O STATUS       STA SCROPT    ;SCREEN OUTPUT OPTION       STA CMPERR    ;COMPARISON ERROR       STA BCOUNT       STA BCOUNT+1       STA TCOUNT       STA TCOUNT+1       STA EOFB       STA EOFT              LDA #$FF      ;MAX BYTE       STA BYCNT     ;BYTE COUNT;*********************************; INIT DISK;*********************************INITD  =*       LDA #$02    ;LENGTH OF FILENAME       LDY #>INIT  ;HIGH ADDRESS OF FILENAME       LDX #<INIT  ;LOW ADDRESS OF FILENAME       JSR SETNAM  ;SET FILE NAME       LDA #$0F    ;FILE #15       LDX #$08    ;DEVICE #8       LDY #$0F    ;SECONDARY ADDRESS #15 (CMD)       JSR SETLFS  ;SET FILE PARAMETERS       JSR OPEN    ;OPEN FILE       LDA #$0F    ;FILE #15       JSR CLOSE   ;CLOSE IT       JSR DISERR  ;LOW LEVEL CHECK DISK ERROR       BCC INITOK  ;IF C=0 NO ERRORS       JMP QUITER  ;DISK ERROR, QUIT;*********************************; OPEN FILE TO SCREEN;*********************************INITOK =*       LDA #$03    ;FILE #3       LDX #$03    ;DEVICE #3       LDY #$00    ;SECOND ADDRESS       JSR SETLFS  ;SET FILE;       LDA #$00    ;GET LENGTH       LDX #$00    ;LOW FILENAME       LDY #$00    ;HIGH FILENAME       JSR SETNAM  ;SET FILENAME       JSR OPEN    ;OPEN FILE        LDX #$03    ;FILE #3       JSR CHKOUT  ;SET TO OUTPUT;*********************************; PRINT TITLE;*********************************       LDA #<MSGI1  ;LOW BYTE MESSAGE       LDY #>MSGI1  ;HIGH BYTE MESSAGE       JSR STRPNT  ;OUTPUT MESSAGE;*********************************; PROMPT FOR BASE PRG FILENAME;*********************************       LDA #<MSGI2  ;LOW BYTE MESSAGE       LDY #>MSGI2  ;HIGH BYTE MESSAGE       JSR STRPNT  ;OUTPUT MESSAGE;*********************************; READ IN BASE PRG FILE NAME;*********************************       JSR INSTNO  ;READ STRING INTO OBUF;*********************************; APPEND ,P,R;*********************************PFILE0 LDX #$00PFILE1 LDA PROGR,X       STA OUF,Y       INY       INX       CPX #$04       BNE PFILE1       STY SAVO ; LENGTH OF FILE NAME;*********************************; OUTPUT CARRAIGE RETURN;*********************************       JSR PRTCR  ;PRINT IT;*********************************; OPEN BASE PRG FILE;*********************************       LDA #$07    ;FILE #7       LDX #$08    ;DEVICE #8       LDY #$07    ;SECOND ADDRESS       JSR SETLFS  ;SET FILE;       LDA SAVO    ;GET LENGTH       LDX #<OUF   ;LOW FILENAME       LDY #>OUF   ;HIGH FILENAME       JSR SETNAM  ;SET FILENAME;       JSR OPEN    ;OPEN FILE;       JSR DISERR       BCC BASOK       JMP QUITER;*********************************; PROMPT FOR TARGET PRG FILENAME;*********************************BASOK = *        LDA #<MSGI3  ;LOW BYTE MESSAGE       LDY #>MSGI3  ;HIGH BYTE MESSAGE       JSR STRPNT  ;OUTPUT MESSAGE;*********************************; READ IN PRG FILE NAME;*********************************       JSR INSTNP  ;READ STRING INTO PBUF;*********************************; APPEND ,P,R;*********************************PFILE2 LDX #$00PFILE3 LDA PROGR,X       STA PUF,Y       INY       INX       CPX #$04       BNE PFILE3       STY SAVP    ; LENGTH OF FILE NAME;*********************************; OPEN TARGET PROGRAM FILE;*********************************       LDA #$08    ;FILE #7       LDX #$08    ;DEVICE #8       LDY #$08    ;SECOND ADDRESS       JSR SETLFS  ;SET FILE;       LDA SAVP    ;GET LENGTH       LDX #<PUF   ;LOW FILENAME       LDY #>PUF   ;HIGH FILENAME       JSR SETNAM  ;SET FILENAME       JSR OPEN    ;OPEN FILE;       JSR DISERR       BCC TAROK       JMP QUITER;*********************************; SCREEN OUTPUT OPTION (VERBOSE);*********************************TAROK = *       JSR PRTCR  ;OUTPUT TO SCREEN       LDA #<MSS1  ;LOW BYTE MESSAGE       LDY #>MSS1  ;HIGH BYTE MESSAGE       JSR STRPNT  ;OUTPUT MESSAGE       JSR CRNO    ;GET KEY PRESS       BCS SOP1    ;C=0 YES C=1 NO       LDA #$00    ;ZERO       STA SCROPT  ;PRINT TO SCREEN       BEQ SOP2    ;SLIP NEXTSOP1   LDA #$01    ;ONE       STA SCROPT  ;NO PRINT TO SCREEN ;*********************************; NEW LINE - CR;*********************************SOP2 =*       JSR PRTCR  ;OUTPUT TO SCREEN;*********************************; SET INPUT TO BASE FILE;*********************************       LDX #$07    ;FILE #7       JSR CHKIN   ;INPUT FILE;*********************************; NEW LINE - CR;*********************************       JSR PRTCR  ;OUTPUT TO SCREEN;*********************************; INPUT START ADDRESS FROM BASE FILE;*********************************       JSR CLRCHN  ;RESET I/O        LDX #$07    ;FILE #7       JSR CHKIN   ;INPUT FILE       JSR CHRIN   ;INPUT CHAR       STA ADDLO7       JSR CHRIN   ;INPUT CHAR       STA ADDHI7;*********************************; PRINT BASE FILE LOAD ADDRESS;*********************************       LDA #<MSGO1  ;LOW BYTE MESSAGE       LDY #>MSGO1  ;HIGH BYTE MESSAGE       JSR STRPNT  ;OUTPUT MESSAGE;*********************************; PRINT WORD MSB IN Y LSB IN A;*********************************       LDY ADDHI7       LDA ADDLO7       JSR PRBYTS       JSR PRTCR       JSR PRTCR;*********************************; INPUT START ADDRESS FROM TARGET FILE;*********************************       JSR CLRCHN  ;RESET I/O        LDX #$08    ;FILE #7       JSR CHKIN   ;INPUT FILE       JSR CHRIN   ;INPUT CHAR       STA ADDLO8       JSR CHRIN   ;INPUT CHAR       STA ADDHI8;*********************************; PRINT TARGET FILE LOAD ADDRESS;*********************************       LDA #<MSGO2  ;LOW BYTE MESSAGE       LDY #>MSGO2  ;HIGH BYTE MESSAGE       JSR STRPNT  ;OUTPUT MESSAGE;*********************************; PRINT WORD MSB IN Y LSB IN A;*********************************       LDY ADDHI8       LDA ADDLO8       JSR PRBYTS       JSR PRTCR       JSR PRTCR;*********************************; COMPARE START ADDRESSES;*********************************       LDY ADDLO7       LDA ADDHI7       CPY ADDLO8  ; COMPARE LOW BYTES       BNE ADDNE       CMP ADDHI8  ; COMPARE HIGH BYTES       BNE ADDNE;*********************************; ADDRESSES EQUAL;*********************************       LDX #MSG3-MSG1 ;OFFSET FOR TITLE       JSR PRINT       ;PRINT TITLE              JSR PRTCR       JMP CKSTOP;*********************************; ADDRESSES NOT EQUAL;*********************************ADDNE = *       LDX #MSG4-MSG1 ;OFFSET FOR TITLE       JSR PRINT       ;PRINT TITLE       JSR PRTCR       JMP QUITER;*********************************; LOOP;*********************************CKSTOP = *       JSR STOP    ;CHECK STOP       BNE OK2     ;IF NOT GO ON.       JMP BREAK   ;BREAK ERROR;*********************************; ;*********************************OK2 = *       INC BYCNT       LDA BYCNT       BNE OK3       LDA #'.'       JSR CHROUT;*********************************; ;*********************************OK3 = *       JSR CLRCHN  ;RESET I/O        LDX #$07    ;FILE #7       JSR CHKIN   ;INPUT FILE       JSR CHRIN   ;INPUT BYTE       STA BPRG    ;STORE BYTE       JSR READST       BNE EOF7;*********************************;;*********************************       INC BCOUNT       BNE OK4       INC BCOUNT+1;*********************************;;*********************************OK4 = *       JSR CLRCHN  ;RESET I/O        LDX #$08    ;FILE #8       JSR CHKIN   ;INPUT FILE       JSR CHRIN   ;INPUT BYTE       STA RPRG    ;STORE BYTE       JSR READST       BNE EOF8;*********************************;;*********************************       INC TCOUNT       BNE OK5       INC TCOUNT+1;*********************************; COMPARE BYTES;*********************************OK5 = *       LDA BPRG       CMP RPRG;*********************************; LOOP;*********************************       BEQ CKSTOP;*********************************; COMPARE ERROR;*********************************       LDA #$FF       STA CMPERR       BNE CKSTOP;*********************************; END OF FILE #7;*********************************EOF7 = *       LDA #$FF       STA EOFB       LDX #MSG7-MSG1 ;END OF BASE FILE       JSR PRINT   ;PRINT HEADINGOK6 = *       JSR CLRCHN  ;RESET I/O        LDX #$08    ;FILE #8       JSR CHKIN   ;INPUT FILE       JSR CHRIN   ;INPUT BYTE       STA RPRG    ;STORE BYTE       JSR READST       BNE EOF8       INC TCOUNT       BNE OK7       INC TCOUNT+1OK7 = *       JMP OK6;*********************************; END OF FILE #8;*********************************EOF8 = *       LDA #$FF       STA EOFT       LDX #MSG8-MSG1 ;END OF TARGET FILE       JSR PRINT   ;PRINT HEADING              LDA EOFB       BNE QUITEROK8 = *       JSR CLRCHN  ;RESET I/O        LDX #$07    ;FILE #7       JSR CHKIN   ;INPUT FILE       JSR CHRIN   ;INPUT BYTE       STA BPRG    ;STORE BYTE       JSR READST       BNE QUITER       INC BCOUNT       BNE OK9       INC BCOUNT+1OK9 = *       JMP OK8;*********************************; BREAK MESSAGE - STOP KEY PRESSED;*********************************BREAK =*        LDX #MSG2-MSG1 ;BREAK ERROR       .BYTE $2C      ;BIT TRICK TO SKIP;*********************************; END OF FILES - CLOSE OUT;*********************************QUITER =*       LDX #MSG9-MSG1 ;END OF FILE;*********************************; OUTPUT MESSAGE TO SCREEN;*********************************       JSR PRINT   ;PRINT HEADING;*********************************; CHECK FOR FILES EQUAL LENGTH;*********************************       LDA BCOUNT       CMP TCOUNT   ;COMPARE LOW BYTES       BNE NOTEQ       LDA BCOUNT+1       CMP TCOUNT+1 ;COMPARE HIGH BYTES       BNE NOTEQ;*********************************; FILES SAME LENGTH;*********************************       LDA #<MSGL1  ;LOW BYTE MESSAGE       LDY #>MSGL1  ;HIGH BYTE MESSAGE       JSR STRPNT  ;OUTPUT MESSAGE       CLV       BVC FILEQ;*********************************; FILES NOT SAME LENGTH;*********************************NOTEQ = *       LDA #<MSGL2  ;LOW BYTE MESSAGE       LDY #>MSGL2  ;HIGH BYTE MESSAGE       JSR STRPNT  ;OUTPUT MESSAGEFILEQ = *;*********************************; CHECK FOR FILES EQUAL;*********************************       LDA CMPERR       BNE CM01;*********************************; FILES EQUAL;*********************************       LDX #MSG6-MSG1  ;OFFSET FOR TITLE       JSR PRINT       ;PRINT TITLE       CLV       BVC CLO1;*********************************; FILES NOT EQUAL;*********************************CM01 = *       LDX #MSG5-MSG1  ;OFFSET FOR TITLE       JSR PRINT       ;PRINT TITLE;*********************************; CLOSE OUT FILE AND RESET I/O;*********************************CLO1 = *       LDA #$03    ;FILE #7       JSR CLOSE   ;CLOSE       LDA #$07    ;FILE #7       JSR CLOSE   ;CLOSE       LDA #$08    ;FILE #7       JSR CLOSE   ;CLOSE       JSR CLRCHN  ;RESET I/O        RTS         ;BACK TO BASIC;*********************************;  DISK ERROR CHECK;*********************************DISERR LDA #$08    ;DEV #8       STA FA      ;PUT IN DEV TABLE       JSR TALK    ;SEND TALK       LDA #$6F    ;SECONDARY ADDRESS       STA SA      ;PUT IN TABLE       JSR TALKSA  ;SEND SEC       JSR IECIN   ;GET FIRST BYTE       CMP #'0'    ;IS IT A ZERO       BNE DLOOC   ;IF NOT ZERO ERRORDLOOE  JSR IECIN   ;GET BYTE       CMP #$0D    ;IS IT CR?       BNE DLOOE   ;GET NEXT BYTE       JSR UNTALK  ;UNTALK       CLC         ;NO ERROR FLAG       RTS         ;RETURN;*********************************; PRINT DISK ERROR;*********************************DLOOC  PHA         ;STACK BYTE       JSR PRTCR   ;PRINT CR       PLA         ;GET BYTE       JSR CHROUT  ;PRINT ITDLOOA  JSR IECIN   ;GET NEXT BYTE       JSR CHROUT  ;PRINT IT       CMP #$0D    ;IS IT CR       BNE DLOOA   ;GET NEXT BYTE       JSR UNTALK  ;UNTALK       SEC         ;SET ERROR FLAG       RTS         ;RETURN;*********************************; STORAGE;*********************************ADDLO7 .BYTE $AAADDHI7 .BYTE $AAADDLO8 .BYTE $AAADDHI8 .BYTE $AABPRG   .BYTE $AARPRG   .BYTE $AA;BYCNT  .BYTE $AA;CMPERR .BYTE $AA;BCOUNT .WORD $AAAATCOUNT .WORD $AAAA;EOFB   .BYTE $AAEOFT   .BYTE $AA;*********************************; ;*********************************;NUMBYT .BYTE $AA   ;NUMBER BYTES;CURBYT .BYTE $AA   ;CURRENT BYTE IN RECORD;RECORD .WORD $AAAA ;RECORD NUMBER;STADD  .BYTE $AA   ;START ADDRESSCOUNT  .BYTE $AA   ;COUNTER;TEMP   .BYTE $AA   ;TEMPOARYSCROPT .BYTE $AA   ;SCREEN OUPUT OPTION;*********************************;COUNT1 .BYTE $AA    ;COUNTER;*********************************; ERROR MESSAGES;*********************************MSG1 .BYTE $0D,$8DMSG2 .BYTE $0D.TEXT 'BREAK',$8D;MSG6 .BYTE $0D;.TEXT 'FILE ERRO',$D2;*********************************; STATUS MESSAGES;*********************************MSG3 .BYTE $0D.TEXT 'LOAD ADDRESSES EQUAL',$A0MSG4 .BYTE $0D.TEXT 'LOAD ADDRESSES NOT EQUAL',$A0MSG5 .BYTE $0D.TEXT 'BYTES NOT EQUAL',$A0MSG6 .BYTE $0D.TEXT 'FILES EQUAL',$A0MSG7 .BYTE $0D.TEXT 'END OF BASE FILE',$8DMSG8 .BYTE $0D.TEXT 'END OF TARGET FILE',$8DMSG9 .BYTE $0D.TEXT 'END OF FILE',$8D;*********************************; MESSAGES;*********************************MSGI1 .BYTE $0D,$0D,$0D.TEXT 'COMPARE.C64 V072882'.BYTE $0D.TEXT '(C) 1982 BY COMMODORE BUSINESS '.TEXT 'MACHINES',$0D.BYTE 0MSGI2 .BYTE $0D.TEXT 'BASE PRG FILE NAME ?: ',0MSGI3 .BYTE $0D.TEXT 'TARGET PRG NAME ?: ',0;*********************************;;*********************************MSGO1 .BYTE $0D.TEXT 'BASE FILE LOAD ADDRESSES $',0MSGO2 .BYTE $0D.TEXT 'TARGET FILE LOAD ADDRESSES $',0;*********************************;;*********************************MSGL1 .BYTE $0D.TEXT 'FILES SAME LENGTH',$0D,0MSGL2 .BYTE $0D.TEXT 'FILES DIFFERENT LENGTHS',$0D,0;*********************************; FILENAME NAME BUFFER;*********************************OUF .BYTE $AA,$AA,$AA,$AA,$AA,$AA.BYTE $AA,$AA,$AA,$AA,$AA,$AA.BYTE $AA,$AA,$AA,$AA,$AA,$AA;*********************************; FILENAME NAME BUFFER;*********************************PUF .BYTE $AA,$AA,$AA,$AA,$AA,$AA.BYTE $AA,$AA,$AA,$AA,$AA,$AA.BYTE $AA,$AA,$AA,$AA,$AA,$AA;*********************************; INIT DISK;*********************************INIT  .TEXT 'I0';*********************************;OBJM  .TEXT ',S,R';*********************************;PROGM .TEXT ',P,W';*********************************PROGR .TEXT ',P,R';*********************************SAVO .BYTE $AASAVP .BYTE $AA;*********************************; OUTPUT TO SCREEN OPTION;*********************************MSS1 .BYTE $0D .TEXT 'OUTPUT TO SCREEN (Y OR N/CR)? ' .BYTE 0;*********************************; OUTPUT STRING ROUTINE;*********************************PRINT  STX COUNT   ;PUT X IN COUNTPLOOP  LDX COUNT   ;LOAD X FROM COUNT       LDA MSG1,X  ;LOAD CHAR       PHP         ;SAVE STATUS FLAG       AND #$7F    ;MASK BIT 8       JSR CHROUT  ;PRINT CHAR       INC COUNT   ;INC OFFSET       PLP         ;GET STATUS FLAG       BPL PLOOP   ;IF BIT 8 ZERO       RTS         ;RETURN;*********************************; OUTPUT UTILITIES;*********************************; STRING OUTPUT ROUTINE;*********************************STRPNT STA ZEROUR     ;POINTER TO       STY ZEROUR+1   ;MESSAGE       LDY #$00       ;OFFSETSOUT   LDA (ZEROUR),Y ;GET CHAR       BEQ SEXIT      ;IF ZERO EXIT       JSR CHROUT     ;PRINT       INY            ;INC OFFSET       BNE SOUT       ;LOOPSEXIT  RTS            ;RETURN;*********************************; INPUT UTILITIES;*********************************; GET OPTION (CR/Y OR N): Y=C=0;*********************************CRYS JSR CHRIN CMP #'Y' BEQ CRYS1 CMP #$0D BEQ CRYS1 BNE CRNO1;*********************************; GET OPTION (Y OR CR/N): Y=C=0;*********************************CRNO JSR CHRIN CMP #'N' BEQ CRNO1 CMP #$0D BEQ CRNO1CRYS1 CLC RTSCRNO1 SEC RTS;*********************************; INPUT STRING ROUTINE;*********************************INSTNO LDY #$00INSTN1 JSR CHRIN       STA OUF,Y       INY       CMP #$0D       BNE INSTN1       DEY       RTS;*********************************; INPUT STRING ROUTINE;*********************************INSTNP LDY #$00INSTN2 JSR CHRIN       STA PUF,Y       INY       CMP #$0D       BNE INSTN2       DEY       RTS;*********************************; OUTPUT CARRAIGE RETURN;*********************************PRTCR  LDA #$0D    ;ASCII CR       JMP CHROUT  ;PRINT IT;*********************************; ;*********************************;INPUT = *;       LDX #$07    ;FILE #7;       JSR CHKIN   ;INPUT FILE;       JSR CHRIN   ;INPUT CHAR;       RTS;*********************************; PRINT UTILITES;*********************************; PRINT $;*********************************PRDOL = *       LDA #'$'       JSR CHROUT       RTS;*********************************; PRINT WORD MSB IN Y LSB IN A;*********************************PRBYTS PHA       ;PUT A ON STACK       TYA       ;PUT HIH BYTE IN A       JSR PRBYT ;PRINT MSB       PLA       ;GET LSB;*********************************; PRINT BYTE IN A;*********************************PRBYT  PHA        ;PUT BYTE ON STACK       LSR A      ;4 RIGHT SHIFTS       LSR A      ;TO MOVE HIGH       LSR A      ;NIBBLE TO LOW       LSR A      ;NIB WITH HIGH 0'S       TAY        ;USE AS POINTER       LDA HEXA,Y ;GET ASCII       JSR CHROUT ;PRINT       PLA        ;PULL BYTE OUT       AND #$0F   ;MASK HIGH NIBBLE       TAY        ;USE AS POINTER       LDA HEXA,Y ;GET ASCII       JMP CHROUT ;PRINT;*********************************; HEX-TO-ASCII TABLE;*********************************HEXA   .TEXT '0123456789ABCDEF';*********************************; CURRENT RECORD HOLDING BUFFER;*********************************;DATA .BYTE $AA,$AA,$AA,$AA,$AA,$AA;.BYTE $AA,$AA,$AA,$AA,$AA,$AA;.BYTE $AA,$AA,$AA,$AA,$AA,$AA;.BYTE $AA,$AA,$AA,$AA,$AA,$AA;.BYTE $AA,$AA,$AA,$AA,$AA,$AA;.BYTE $AA,$AA,$AA,$AA,$AA,$AA;.BYTE $AA,$AA,$AA,$AA,$AA,$AA;.BYTE $AA,$AA,$AA,$AA,$AA,$AA;*********************************;.END