
; 64tass Turbo Assembler Macro V1.53.1515 listing file
; 64tass -L bcompare.lst -o bcompare.prg bcompare.asm
; Fri Nov 17 19:32:52 2017

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: bcompare.asm

=1					BSTUB = 1
>0801	0d 08				 .WORD BASIC    ;LINE LINK POINTER
>0803	0a 00				 .BYTE $0A,$00  ;LINE NUMBER (10)
>0805	9e				 .BYTE 158      ;SYS COMMAND TOKEN
>0806	28 32 30 36 33 29		 .TEXT '(2063)' ;CALL TO $080F
>080c	00				 .BYTE $00      ;END OF LINE
.080d					BASIC
>080d	00 00				 .BYTE $00,$00  ;END OF BASIC
=$ff90					SETMSG=$FF90
.080f	a9 40		lda #$40	 LDA #$40     ;ALLOW KERNAL MESSAGES
.0811	20 90 ff	jsr $ff90	 JSR SETMSG

;******  Processing file: compare.asm

=$90					STATUS=$90         ;STATUS BYTE
=$b8					LA    =$B8         ;CURRENT LOGICAL DEVICE NUMBER
=$b9					SA    =$B9         ;CURRENT SECONDARY ADDRESS
=$ba					FA    =$BA         ;CURRENT DEVICE NUMBER
=$fb					ZEROPG=$FB         ;ZERO PAGE POINTER
=$fd					ZEROUR=$FD         ;ZERO PAGE POINTER
=$ff96					TALKSA=$FF96       ;SERIAL TALK SA
=$ffa5					IECIN =$FFA5       ;SERIAL IN
=$ffab					UNTALK=$FFAB       ;SERIAL UNTALK
=$ffe1					STOP  =$FFE1       ;CHECK FOR STOP
=$ffb4					TALK  =$FFB4       ;SERIAL TALK
=$ffba					SETLFS=$FFBA       ;SET LOGICAL FILE
=$ffbd					SETNAM=$FFBD       ;SET FILENAME
=$ffc0					OPEN  =$FFC0       ;OPEN FILE
=$ffc3					CLOSE =$FFC3       ;CLOSE LOGICAL FILE
=$ffc6					CHKIN =$FFC6       ;OPEN INPUT CHANNEL
=$ffc9					CHKOUT=$FFC9       ;OPEN OUTPUT CHANNEL
=$ffcc					CLRCHN=$FFCC       ;RESET I/O CHANNELS
=$ffcf					CHRIN =$FFCF       ;GET KEYBOARD INPUT
=$ffd2					CHROUT=$FFD2       ;OUTPUT CHARACTER
=$ffb7					READST=$FFB7       ;READ I/O STATUS
=$0814					COMPAR =*
.0814	20 cc ff	jsr $ffcc	       JSR CLRCHN    ;RSET I/O
.0817	a9 00		lda #$00	       LDA #$00      ;ZERO BYTE
.0819	85 90		sta $90		       STA STATUS    ;I/O STATUS
.081b	8d d4 0a	sta $0ad4	       STA SCROPT    ;SCREEN OUTPUT OPTION
.081e	8d cc 0a	sta $0acc	       STA CMPERR    ;COMPARISON ERROR
.0821	8d cd 0a	sta $0acd	       STA BCOUNT
.0824	8d ce 0a	sta $0ace	       STA BCOUNT+1
.0827	8d cf 0a	sta $0acf	       STA TCOUNT
.082a	8d d0 0a	sta $0ad0	       STA TCOUNT+1
.082d	8d d1 0a	sta $0ad1	       STA EOFB
.0830	8d d2 0a	sta $0ad2	       STA EOFT
.0833	a9 ff		lda #$ff	       LDA #$FF      ;MAX BYTE
.0835	8d cb 0a	sta $0acb	       STA BYCNT     ;BYTE COUNT
=$0838					INITD  =*
.0838	a9 02		lda #$02	       LDA #$02    ;LENGTH OF FILENAME
.083a	a0 0c		ldy #$0c	       LDY #>INIT  ;HIGH ADDRESS OF FILENAME
.083c	a2 58		ldx #$58	       LDX #<INIT  ;LOW ADDRESS OF FILENAME
.083e	20 bd ff	jsr $ffbd	       JSR SETNAM  ;SET FILE NAME
.0841	a9 0f		lda #$0f	       LDA #$0F    ;FILE #15
.0843	a2 08		ldx #$08	       LDX #$08    ;DEVICE #8
.0845	a0 0f		ldy #$0f	       LDY #$0F    ;SECONDARY ADDRESS #15 (CMD)
.0847	20 ba ff	jsr $ffba	       JSR SETLFS  ;SET FILE PARAMETERS
.084a	20 c0 ff	jsr $ffc0	       JSR OPEN    ;OPEN FILE
.084d	a9 0f		lda #$0f	       LDA #$0F    ;FILE #15
.084f	20 c3 ff	jsr $ffc3	       JSR CLOSE   ;CLOSE IT
.0852	20 8d 0a	jsr $0a8d	       JSR DISERR  ;LOW LEVEL CHECK DISK ERROR
.0855	90 03		bcc $085a	       BCC INITOK  ;IF C=0 NO ERRORS
.0857	4c 42 0a	jmp $0a42	       JMP QUITER  ;DISK ERROR, QUIT
=$085a					INITOK =*
.085a	a9 03		lda #$03	       LDA #$03    ;FILE #3
.085c	a2 03		ldx #$03	       LDX #$03    ;DEVICE #3
.085e	a0 00		ldy #$00	       LDY #$00    ;SECOND ADDRESS
.0860	20 ba ff	jsr $ffba	       JSR SETLFS  ;SET FILE
.0863	a9 00		lda #$00	       LDA #$00    ;GET LENGTH
.0865	a2 00		ldx #$00	       LDX #$00    ;LOW FILENAME
.0867	a0 00		ldy #$00	       LDY #$00    ;HIGH FILENAME
.0869	20 bd ff	jsr $ffbd	       JSR SETNAM  ;SET FILENAME
.086c	20 c0 ff	jsr $ffc0	       JSR OPEN    ;OPEN FILE
.086f	a2 03		ldx #$03	       LDX #$03    ;FILE #3
.0871	20 c9 ff	jsr $ffc9	       JSR CHKOUT  ;SET TO OUTPUT
.0874	a9 5f		lda #$5f	       LDA #<MSGI1  ;LOW BYTE MESSAGE
.0876	a0 0b		ldy #$0b	       LDY #>MSGI1  ;HIGH BYTE MESSAGE
.0878	20 96 0c	jsr $0c96	       JSR STRPNT  ;OUTPUT MESSAGE
.087b	a9 9f		lda #$9f	       LDA #<MSGI2  ;LOW BYTE MESSAGE
.087d	a0 0b		ldy #$0b	       LDY #>MSGI2  ;HIGH BYTE MESSAGE
.087f	20 96 0c	jsr $0c96	       JSR STRPNT  ;OUTPUT MESSAGE
.0882	20 c3 0c	jsr $0cc3	       JSR INSTNO  ;READ STRING INTO OBUF
.0885	a2 00		ldx #$00	PFILE0 LDX #$00
.0887	bd 5a 0c	lda $0c5a,x	PFILE1 LDA PROGR,X
.088a	99 34 0c	sta $0c34,y	       STA OUF,Y
.088d	c8		iny		       INY
.088e	e8		inx		       INX
.088f	e0 04		cpx #$04	       CPX #$04
.0891	d0 f4		bne $0887	       BNE PFILE1
.0893	8c 5e 0c	sty $0c5e	       STY SAVO ; LENGTH OF FILE NAME
.0896	20 e1 0c	jsr $0ce1	       JSR PRTCR  ;PRINT IT
.0899	a9 07		lda #$07	       LDA #$07    ;FILE #7
.089b	a2 08		ldx #$08	       LDX #$08    ;DEVICE #8
.089d	a0 07		ldy #$07	       LDY #$07    ;SECOND ADDRESS
.089f	20 ba ff	jsr $ffba	       JSR SETLFS  ;SET FILE
.08a2	ad 5e 0c	lda $0c5e	       LDA SAVO    ;GET LENGTH
.08a5	a2 34		ldx #$34	       LDX #<OUF   ;LOW FILENAME
.08a7	a0 0c		ldy #$0c	       LDY #>OUF   ;HIGH FILENAME
.08a9	20 bd ff	jsr $ffbd	       JSR SETNAM  ;SET FILENAME
.08ac	20 c0 ff	jsr $ffc0	       JSR OPEN    ;OPEN FILE
.08af	20 8d 0a	jsr $0a8d	       JSR DISERR
.08b2	90 03		bcc $08b7	       BCC BASOK
.08b4	4c 42 0a	jmp $0a42	       JMP QUITER
=$08b7					BASOK = *
.08b7	a9 b7		lda #$b7	       LDA #<MSGI3  ;LOW BYTE MESSAGE
.08b9	a0 0b		ldy #$0b	       LDY #>MSGI3  ;HIGH BYTE MESSAGE
.08bb	20 96 0c	jsr $0c96	       JSR STRPNT  ;OUTPUT MESSAGE
.08be	20 d2 0c	jsr $0cd2	       JSR INSTNP  ;READ STRING INTO PBUF
.08c1	a2 00		ldx #$00	PFILE2 LDX #$00
.08c3	bd 5a 0c	lda $0c5a,x	PFILE3 LDA PROGR,X
.08c6	99 46 0c	sta $0c46,y	       STA PUF,Y
.08c9	c8		iny		       INY
.08ca	e8		inx		       INX
.08cb	e0 04		cpx #$04	       CPX #$04
.08cd	d0 f4		bne $08c3	       BNE PFILE3
.08cf	8c 5f 0c	sty $0c5f	       STY SAVP    ; LENGTH OF FILE NAME
.08d2	a9 08		lda #$08	       LDA #$08    ;FILE #7
.08d4	a2 08		ldx #$08	       LDX #$08    ;DEVICE #8
.08d6	a0 08		ldy #$08	       LDY #$08    ;SECOND ADDRESS
.08d8	20 ba ff	jsr $ffba	       JSR SETLFS  ;SET FILE
.08db	ad 5f 0c	lda $0c5f	       LDA SAVP    ;GET LENGTH
.08de	a2 46		ldx #$46	       LDX #<PUF   ;LOW FILENAME
.08e0	a0 0c		ldy #$0c	       LDY #>PUF   ;HIGH FILENAME
.08e2	20 bd ff	jsr $ffbd	       JSR SETNAM  ;SET FILENAME
.08e5	20 c0 ff	jsr $ffc0	       JSR OPEN    ;OPEN FILE
.08e8	20 8d 0a	jsr $0a8d	       JSR DISERR
.08eb	90 03		bcc $08f0	       BCC TAROK
.08ed	4c 42 0a	jmp $0a42	       JMP QUITER
=$08f0					TAROK = *
.08f0	20 e1 0c	jsr $0ce1	       JSR PRTCR  ;OUTPUT TO SCREEN
.08f3	a9 60		lda #$60	       LDA #<MSS1  ;LOW BYTE MESSAGE
.08f5	a0 0c		ldy #$0c	       LDY #>MSS1  ;HIGH BYTE MESSAGE
.08f7	20 96 0c	jsr $0c96	       JSR STRPNT  ;OUTPUT MESSAGE
.08fa	20 b4 0c	jsr $0cb4	       JSR CRNO    ;GET KEY PRESS
.08fd	b0 07		bcs $0906	       BCS SOP1    ;C=0 YES C=1 NO
.08ff	a9 00		lda #$00	       LDA #$00    ;ZERO
.0901	8d d4 0a	sta $0ad4	       STA SCROPT  ;PRINT TO SCREEN
.0904	f0 05		beq $090b	       BEQ SOP2    ;SLIP NEXT
.0906	a9 01		lda #$01	SOP1   LDA #$01    ;ONE
.0908	8d d4 0a	sta $0ad4	       STA SCROPT  ;NO PRINT TO SCREEN
=$090b					SOP2 =*
.090b	20 e1 0c	jsr $0ce1	       JSR PRTCR  ;OUTPUT TO SCREEN
.090e	a2 07		ldx #$07	       LDX #$07    ;FILE #7
.0910	20 c6 ff	jsr $ffc6	       JSR CHKIN   ;INPUT FILE
.0913	20 e1 0c	jsr $0ce1	       JSR PRTCR  ;OUTPUT TO SCREEN
.0916	20 cc ff	jsr $ffcc	       JSR CLRCHN  ;RESET I/O
.0919	a2 07		ldx #$07	       LDX #$07    ;FILE #7
.091b	20 c6 ff	jsr $ffc6	       JSR CHKIN   ;INPUT FILE
.091e	20 cf ff	jsr $ffcf	       JSR CHRIN   ;INPUT CHAR
.0921	8d c5 0a	sta $0ac5	       STA ADDLO7
.0924	20 cf ff	jsr $ffcf	       JSR CHRIN   ;INPUT CHAR
.0927	8d c6 0a	sta $0ac6	       STA ADDHI7
.092a	a9 cc		lda #$cc	       LDA #<MSGO1  ;LOW BYTE MESSAGE
.092c	a0 0b		ldy #$0b	       LDY #>MSGO1  ;HIGH BYTE MESSAGE
.092e	20 96 0c	jsr $0c96	       JSR STRPNT  ;OUTPUT MESSAGE
.0931	ac c6 0a	ldy $0ac6	       LDY ADDHI7
.0934	ad c5 0a	lda $0ac5	       LDA ADDLO7
.0937	20 ec 0c	jsr $0cec	       JSR PRBYTS
.093a	20 e1 0c	jsr $0ce1	       JSR PRTCR
.093d	20 e1 0c	jsr $0ce1	       JSR PRTCR
.0940	20 cc ff	jsr $ffcc	       JSR CLRCHN  ;RESET I/O
.0943	a2 08		ldx #$08	       LDX #$08    ;FILE #7
.0945	20 c6 ff	jsr $ffc6	       JSR CHKIN   ;INPUT FILE
.0948	20 cf ff	jsr $ffcf	       JSR CHRIN   ;INPUT CHAR
.094b	8d c7 0a	sta $0ac7	       STA ADDLO8
.094e	20 cf ff	jsr $ffcf	       JSR CHRIN   ;INPUT CHAR
.0951	8d c8 0a	sta $0ac8	       STA ADDHI8
.0954	a9 e8		lda #$e8	       LDA #<MSGO2  ;LOW BYTE MESSAGE
.0956	a0 0b		ldy #$0b	       LDY #>MSGO2  ;HIGH BYTE MESSAGE
.0958	20 96 0c	jsr $0c96	       JSR STRPNT  ;OUTPUT MESSAGE
.095b	ac c8 0a	ldy $0ac8	       LDY ADDHI8
.095e	ad c7 0a	lda $0ac7	       LDA ADDLO8
.0961	20 ec 0c	jsr $0cec	       JSR PRBYTS
.0964	20 e1 0c	jsr $0ce1	       JSR PRTCR
.0967	20 e1 0c	jsr $0ce1	       JSR PRTCR
.096a	ac c5 0a	ldy $0ac5	       LDY ADDLO7
.096d	ad c6 0a	lda $0ac6	       LDA ADDHI7
.0970	cc c7 0a	cpy $0ac7	       CPY ADDLO8  ; COMPARE LOW BYTES
.0973	d0 10		bne $0985	       BNE ADDNE
.0975	cd c8 0a	cmp $0ac8	       CMP ADDHI8  ; COMPARE HIGH BYTES
.0978	d0 0b		bne $0985	       BNE ADDNE
.097a	a2 09		ldx #$09	       LDX #MSG3-MSG1 ;OFFSET FOR TITLE
.097c	20 80 0c	jsr $0c80	       JSR PRINT       ;PRINT TITLE
.097f	20 e1 0c	jsr $0ce1	       JSR PRTCR
.0982	4c 90 09	jmp $0990	       JMP CKSTOP
=$0985					ADDNE = *
.0985	a2 1f		ldx #$1f	       LDX #MSG4-MSG1 ;OFFSET FOR TITLE
.0987	20 80 0c	jsr $0c80	       JSR PRINT       ;PRINT TITLE
.098a	20 e1 0c	jsr $0ce1	       JSR PRTCR
.098d	4c 42 0a	jmp $0a42	       JMP QUITER
=$0990					CKSTOP = *
.0990	20 e1 ff	jsr $ffe1	       JSR STOP    ;CHECK STOP
.0993	d0 03		bne $0998	       BNE OK2     ;IF NOT GO ON.
.0995	4c 3f 0a	jmp $0a3f	       JMP BREAK   ;BREAK ERROR
=$0998					OK2 = *
.0998	ee cb 0a	inc $0acb	       INC BYCNT
.099b	ad cb 0a	lda $0acb	       LDA BYCNT
.099e	d0 05		bne $09a5	       BNE OK3
.09a0	a9 2e		lda #$2e	       LDA #'.'
.09a2	20 d2 ff	jsr $ffd2	       JSR CHROUT
=$09a5					OK3 = *
.09a5	20 cc ff	jsr $ffcc	       JSR CLRCHN  ;RESET I/O
.09a8	a2 07		ldx #$07	       LDX #$07    ;FILE #7
.09aa	20 c6 ff	jsr $ffc6	       JSR CHKIN   ;INPUT FILE
.09ad	20 cf ff	jsr $ffcf	       JSR CHRIN   ;INPUT BYTE
.09b0	8d c9 0a	sta $0ac9	       STA BPRG    ;STORE BYTE
.09b3	20 b7 ff	jsr $ffb7	       JSR READST
.09b6	d0 32		bne $09ea	       BNE EOF7
.09b8	ee cd 0a	inc $0acd	       INC BCOUNT
.09bb	d0 03		bne $09c0	       BNE OK4
.09bd	ee ce 0a	inc $0ace	       INC BCOUNT+1
=$09c0					OK4 = *
.09c0	20 cc ff	jsr $ffcc	       JSR CLRCHN  ;RESET I/O
.09c3	a2 08		ldx #$08	       LDX #$08    ;FILE #8
.09c5	20 c6 ff	jsr $ffc6	       JSR CHKIN   ;INPUT FILE
.09c8	20 cf ff	jsr $ffcf	       JSR CHRIN   ;INPUT BYTE
.09cb	8d ca 0a	sta $0aca	       STA RPRG    ;STORE BYTE
.09ce	20 b7 ff	jsr $ffb7	       JSR READST
.09d1	d0 3f		bne $0a12	       BNE EOF8
.09d3	ee cf 0a	inc $0acf	       INC TCOUNT
.09d6	d0 03		bne $09db	       BNE OK5
.09d8	ee d0 0a	inc $0ad0	       INC TCOUNT+1
=$09db					OK5 = *
.09db	ad c9 0a	lda $0ac9	       LDA BPRG
.09de	cd ca 0a	cmp $0aca	       CMP RPRG
.09e1	f0 ad		beq $0990	       BEQ CKSTOP
.09e3	a9 ff		lda #$ff	       LDA #$FF
.09e5	8d cc 0a	sta $0acc	       STA CMPERR
.09e8	d0 a6		bne $0990	       BNE CKSTOP
=$09ea					EOF7 = *
.09ea	a9 ff		lda #$ff	       LDA #$FF
.09ec	8d d1 0a	sta $0ad1	       STA EOFB
.09ef	a2 57		ldx #$57	       LDX #MSG7-MSG1 ;END OF BASE FILE
.09f1	20 80 0c	jsr $0c80	       JSR PRINT   ;PRINT HEADING
=$09f4					OK6 = *
.09f4	20 cc ff	jsr $ffcc	       JSR CLRCHN  ;RESET I/O
.09f7	a2 08		ldx #$08	       LDX #$08    ;FILE #8
.09f9	20 c6 ff	jsr $ffc6	       JSR CHKIN   ;INPUT FILE
.09fc	20 cf ff	jsr $ffcf	       JSR CHRIN   ;INPUT BYTE
.09ff	8d ca 0a	sta $0aca	       STA RPRG    ;STORE BYTE
.0a02	20 b7 ff	jsr $ffb7	       JSR READST
.0a05	d0 0b		bne $0a12	       BNE EOF8
.0a07	ee cf 0a	inc $0acf	       INC TCOUNT
.0a0a	d0 03		bne $0a0f	       BNE OK7
.0a0c	ee d0 0a	inc $0ad0	       INC TCOUNT+1
=$0a0f					OK7 = *
.0a0f	4c f4 09	jmp $09f4	       JMP OK6
=$0a12					EOF8 = *
.0a12	a9 ff		lda #$ff	       LDA #$FF
.0a14	8d d2 0a	sta $0ad2	       STA EOFT
.0a17	a2 69		ldx #$69	       LDX #MSG8-MSG1 ;END OF TARGET FILE
.0a19	20 80 0c	jsr $0c80	       JSR PRINT   ;PRINT HEADING
.0a1c	ad d1 0a	lda $0ad1	       LDA EOFB
.0a1f	d0 21		bne $0a42	       BNE QUITER
=$0a21					OK8 = *
.0a21	20 cc ff	jsr $ffcc	       JSR CLRCHN  ;RESET I/O
.0a24	a2 07		ldx #$07	       LDX #$07    ;FILE #7
.0a26	20 c6 ff	jsr $ffc6	       JSR CHKIN   ;INPUT FILE
.0a29	20 cf ff	jsr $ffcf	       JSR CHRIN   ;INPUT BYTE
.0a2c	8d c9 0a	sta $0ac9	       STA BPRG    ;STORE BYTE
.0a2f	20 b7 ff	jsr $ffb7	       JSR READST
.0a32	d0 0e		bne $0a42	       BNE QUITER
.0a34	ee cd 0a	inc $0acd	       INC BCOUNT
.0a37	d0 03		bne $0a3c	       BNE OK9
.0a39	ee ce 0a	inc $0ace	       INC BCOUNT+1
=$0a3c					OK9 = *
.0a3c	4c 21 0a	jmp $0a21	       JMP OK8
=$0a3f					BREAK =*
.0a3f	a2 02		ldx #$02	       LDX #MSG2-MSG1 ;BREAK ERROR
>0a41	2c				       .BYTE $2C      ;BIT TRICK TO SKIP
=$0a42					QUITER =*
.0a42	a2 7d		ldx #$7d	       LDX #MSG9-MSG1 ;END OF FILE
.0a44	20 80 0c	jsr $0c80	       JSR PRINT   ;PRINT HEADING
.0a47	ad cd 0a	lda $0acd	       LDA BCOUNT
.0a4a	cd cf 0a	cmp $0acf	       CMP TCOUNT   ;COMPARE LOW BYTES
.0a4d	d0 12		bne $0a61	       BNE NOTEQ
.0a4f	ad ce 0a	lda $0ace	       LDA BCOUNT+1
.0a52	cd d0 0a	cmp $0ad0	       CMP TCOUNT+1 ;COMPARE HIGH BYTES
.0a55	d0 0a		bne $0a61	       BNE NOTEQ
.0a57	a9 06		lda #$06	       LDA #<MSGL1  ;LOW BYTE MESSAGE
.0a59	a0 0c		ldy #$0c	       LDY #>MSGL1  ;HIGH BYTE MESSAGE
.0a5b	20 96 0c	jsr $0c96	       JSR STRPNT  ;OUTPUT MESSAGE
.0a5e	b8		clv		       CLV
.0a5f	50 07		bvc $0a68	       BVC FILEQ
=$0a61					NOTEQ = *
.0a61	a9 1a		lda #$1a	       LDA #<MSGL2  ;LOW BYTE MESSAGE
.0a63	a0 0c		ldy #$0c	       LDY #>MSGL2  ;HIGH BYTE MESSAGE
.0a65	20 96 0c	jsr $0c96	       JSR STRPNT  ;OUTPUT MESSAGE
=$0a68					FILEQ = *
.0a68	ad cc 0a	lda $0acc	       LDA CMPERR
.0a6b	d0 08		bne $0a75	       BNE CM01
.0a6d	a2 4a		ldx #$4a	       LDX #MSG6-MSG1  ;OFFSET FOR TITLE
.0a6f	20 80 0c	jsr $0c80	       JSR PRINT       ;PRINT TITLE
.0a72	b8		clv		       CLV
.0a73	50 05		bvc $0a7a	       BVC CLO1
=$0a75					CM01 = *
.0a75	a2 39		ldx #$39	       LDX #MSG5-MSG1  ;OFFSET FOR TITLE
.0a77	20 80 0c	jsr $0c80	       JSR PRINT       ;PRINT TITLE
=$0a7a					CLO1 = *
.0a7a	a9 03		lda #$03	       LDA #$03    ;FILE #7
.0a7c	20 c3 ff	jsr $ffc3	       JSR CLOSE   ;CLOSE
.0a7f	a9 07		lda #$07	       LDA #$07    ;FILE #7
.0a81	20 c3 ff	jsr $ffc3	       JSR CLOSE   ;CLOSE
.0a84	a9 08		lda #$08	       LDA #$08    ;FILE #7
.0a86	20 c3 ff	jsr $ffc3	       JSR CLOSE   ;CLOSE
.0a89	20 cc ff	jsr $ffcc	       JSR CLRCHN  ;RESET I/O
.0a8c	60		rts		       RTS         ;BACK TO BASIC
.0a8d	a9 08		lda #$08	DISERR LDA #$08    ;DEV #8
.0a8f	85 ba		sta $ba		       STA FA      ;PUT IN DEV TABLE
.0a91	20 b4 ff	jsr $ffb4	       JSR TALK    ;SEND TALK
.0a94	a9 6f		lda #$6f	       LDA #$6F    ;SECONDARY ADDRESS
.0a96	85 b9		sta $b9		       STA SA      ;PUT IN TABLE
.0a98	20 96 ff	jsr $ff96	       JSR TALKSA  ;SEND SEC
.0a9b	20 a5 ff	jsr $ffa5	       JSR IECIN   ;GET FIRST BYTE
.0a9e	c9 30		cmp #$30	       CMP #'0'    ;IS IT A ZERO
.0aa0	d0 0c		bne $0aae	       BNE DLOOC   ;IF NOT ZERO ERROR
.0aa2	20 a5 ff	jsr $ffa5	DLOOE  JSR IECIN   ;GET BYTE
.0aa5	c9 0d		cmp #$0d	       CMP #$0D    ;IS IT CR?
.0aa7	d0 f9		bne $0aa2	       BNE DLOOE   ;GET NEXT BYTE
.0aa9	20 ab ff	jsr $ffab	       JSR UNTALK  ;UNTALK
.0aac	18		clc		       CLC         ;NO ERROR FLAG
.0aad	60		rts		       RTS         ;RETURN
.0aae	48		pha		DLOOC  PHA         ;STACK BYTE
.0aaf	20 e1 0c	jsr $0ce1	       JSR PRTCR   ;PRINT CR
.0ab2	68		pla		       PLA         ;GET BYTE
.0ab3	20 d2 ff	jsr $ffd2	       JSR CHROUT  ;PRINT IT
.0ab6	20 a5 ff	jsr $ffa5	DLOOA  JSR IECIN   ;GET NEXT BYTE
.0ab9	20 d2 ff	jsr $ffd2	       JSR CHROUT  ;PRINT IT
.0abc	c9 0d		cmp #$0d	       CMP #$0D    ;IS IT CR
.0abe	d0 f6		bne $0ab6	       BNE DLOOA   ;GET NEXT BYTE
.0ac0	20 ab ff	jsr $ffab	       JSR UNTALK  ;UNTALK
.0ac3	38		sec		       SEC         ;SET ERROR FLAG
.0ac4	60		rts		       RTS         ;RETURN
>0ac5	aa				ADDLO7 .BYTE $AA
>0ac6	aa				ADDHI7 .BYTE $AA
>0ac7	aa				ADDLO8 .BYTE $AA
>0ac8	aa				ADDHI8 .BYTE $AA
>0ac9	aa				BPRG   .BYTE $AA
>0aca	aa				RPRG   .BYTE $AA
>0acb	aa				BYCNT  .BYTE $AA
>0acc	aa				CMPERR .BYTE $AA
>0acd	aa aa				BCOUNT .WORD $AAAA
>0acf	aa aa				TCOUNT .WORD $AAAA
>0ad1	aa				EOFB   .BYTE $AA
>0ad2	aa				EOFT   .BYTE $AA
>0ad3	aa				COUNT  .BYTE $AA   ;COUNTER
>0ad4	aa				SCROPT .BYTE $AA   ;SCREEN OUPUT OPTION
>0ad5	0d 8d				MSG1 .BYTE $0D,$8D
>0ad7	0d				MSG2 .BYTE $0D
>0ad8	42 52 45 41 4b 8d		.TEXT 'BREAK',$8D
>0ade	0d				MSG3 .BYTE $0D
>0adf	4c 4f 41 44 20 41 44 44		.TEXT 'LOAD ADDRESSES EQUAL',$A0
>0ae7	52 45 53 53 45 53 20 45 51 55 41 4c a0
>0af4	0d				MSG4 .BYTE $0D
>0af5	4c 4f 41 44 20 41 44 44		.TEXT 'LOAD ADDRESSES NOT EQUAL',$A0
>0afd	52 45 53 53 45 53 20 4e 4f 54 20 45 51 55 41 4c
>0b0d	a0
>0b0e	0d				MSG5 .BYTE $0D
>0b0f	42 59 54 45 53 20 4e 4f		.TEXT 'BYTES NOT EQUAL',$A0
>0b17	54 20 45 51 55 41 4c a0
>0b1f	0d				MSG6 .BYTE $0D
>0b20	46 49 4c 45 53 20 45 51		.TEXT 'FILES EQUAL',$A0
>0b28	55 41 4c a0
>0b2c	0d				MSG7 .BYTE $0D
>0b2d	45 4e 44 20 4f 46 20 42		.TEXT 'END OF BASE FILE',$8D
>0b35	41 53 45 20 46 49 4c 45 8d
>0b3e	0d				MSG8 .BYTE $0D
>0b3f	45 4e 44 20 4f 46 20 54		.TEXT 'END OF TARGET FILE',$8D
>0b47	41 52 47 45 54 20 46 49 4c 45 8d
>0b52	0d				MSG9 .BYTE $0D
>0b53	45 4e 44 20 4f 46 20 46		.TEXT 'END OF FILE',$8D
>0b5b	49 4c 45 8d
>0b5f	0d 0d 0d			MSGI1 .BYTE $0D,$0D,$0D
>0b62	43 4f 4d 50 41 52 45 2e		.TEXT 'COMPARE.C64 V072882'
>0b6a	43 36 34 20 56 30 37 32 38 38 32
>0b75	0d				.BYTE $0D
>0b76	28 43 29 20 31 39 38 32		.TEXT '(C) 1982 BY COMMODORE BUSINESS '
>0b7e	20 42 59 20 43 4f 4d 4d 4f 44 4f 52 45 20 42 55
>0b8e	53 49 4e 45 53 53 20
>0b95	4d 41 43 48 49 4e 45 53		.TEXT 'MACHINES',$0D
>0b9d	0d
>0b9e	00				.BYTE 0
>0b9f	0d				MSGI2 .BYTE $0D
>0ba0	42 41 53 45 20 50 52 47		.TEXT 'BASE PRG FILE NAME ?: ',0
>0ba8	20 46 49 4c 45 20 4e 41 4d 45 20 3f 3a 20 00
>0bb7	0d				MSGI3 .BYTE $0D
>0bb8	54 41 52 47 45 54 20 50		.TEXT 'TARGET PRG NAME ?: ',0
>0bc0	52 47 20 4e 41 4d 45 20 3f 3a 20 00
>0bcc	0d				MSGO1 .BYTE $0D
>0bcd	42 41 53 45 20 46 49 4c		.TEXT 'BASE FILE LOAD ADDRESSES $',0
>0bd5	45 20 4c 4f 41 44 20 41 44 44 52 45 53 53 45 53
>0be5	20 24 00
>0be8	0d				MSGO2 .BYTE $0D
>0be9	54 41 52 47 45 54 20 46		.TEXT 'TARGET FILE LOAD ADDRESSES $',0
>0bf1	49 4c 45 20 4c 4f 41 44 20 41 44 44 52 45 53 53
>0c01	45 53 20 24 00
>0c06	0d				MSGL1 .BYTE $0D
>0c07	46 49 4c 45 53 20 53 41		.TEXT 'FILES SAME LENGTH',$0D,0
>0c0f	4d 45 20 4c 45 4e 47 54 48 0d 00
>0c1a	0d				MSGL2 .BYTE $0D
>0c1b	46 49 4c 45 53 20 44 49		.TEXT 'FILES DIFFERENT LENGTHS',$0D,0
>0c23	46 46 45 52 45 4e 54 20 4c 45 4e 47 54 48 53 0d
>0c33	00
>0c34	aa aa aa aa aa aa		OUF .BYTE $AA,$AA,$AA,$AA,$AA,$AA
>0c3a	aa aa aa aa aa aa		.BYTE $AA,$AA,$AA,$AA,$AA,$AA
>0c40	aa aa aa aa aa aa		.BYTE $AA,$AA,$AA,$AA,$AA,$AA
>0c46	aa aa aa aa aa aa		PUF .BYTE $AA,$AA,$AA,$AA,$AA,$AA
>0c4c	aa aa aa aa aa aa		.BYTE $AA,$AA,$AA,$AA,$AA,$AA
>0c52	aa aa aa aa aa aa		.BYTE $AA,$AA,$AA,$AA,$AA,$AA
>0c58	49 30				INIT  .TEXT 'I0'
>0c5a	2c 50 2c 52			PROGR .TEXT ',P,R'
>0c5e	aa				SAVO .BYTE $AA
>0c5f	aa				SAVP .BYTE $AA
>0c60	0d				MSS1 .BYTE $0D
>0c61	4f 55 54 50 55 54 20 54		 .TEXT 'OUTPUT TO SCREEN (Y OR N/CR)? '
>0c69	4f 20 53 43 52 45 45 4e 20 28 59 20 4f 52 20 4e
>0c79	2f 43 52 29 3f 20
>0c7f	00				 .BYTE 0
.0c80	8e d3 0a	stx $0ad3	PRINT  STX COUNT   ;PUT X IN COUNT
.0c83	ae d3 0a	ldx $0ad3	PLOOP  LDX COUNT   ;LOAD X FROM COUNT
.0c86	bd d5 0a	lda $0ad5,x	       LDA MSG1,X  ;LOAD CHAR
.0c89	08		php		       PHP         ;SAVE STATUS FLAG
.0c8a	29 7f		and #$7f	       AND #$7F    ;MASK BIT 8
.0c8c	20 d2 ff	jsr $ffd2	       JSR CHROUT  ;PRINT CHAR
.0c8f	ee d3 0a	inc $0ad3	       INC COUNT   ;INC OFFSET
.0c92	28		plp		       PLP         ;GET STATUS FLAG
.0c93	10 ee		bpl $0c83	       BPL PLOOP   ;IF BIT 8 ZERO
.0c95	60		rts		       RTS         ;RETURN
.0c96	85 fd		sta $fd		STRPNT STA ZEROUR     ;POINTER TO
.0c98	84 fe		sty $fe		       STY ZEROUR+1   ;MESSAGE
.0c9a	a0 00		ldy #$00	       LDY #$00       ;OFFSET
.0c9c	b1 fd		lda ($fd),y	SOUT   LDA (ZEROUR),Y ;GET CHAR
.0c9e	f0 06		beq $0ca6	       BEQ SEXIT      ;IF ZERO EXIT
.0ca0	20 d2 ff	jsr $ffd2	       JSR CHROUT     ;PRINT
.0ca3	c8		iny		       INY            ;INC OFFSET
.0ca4	d0 f6		bne $0c9c	       BNE SOUT       ;LOOP
.0ca6	60		rts		SEXIT  RTS            ;RETURN
.0ca7	20 cf ff	jsr $ffcf	CRYS JSR CHRIN
.0caa	c9 59		cmp #$59	 CMP #'Y'
.0cac	f0 11		beq $0cbf	 BEQ CRYS1
.0cae	c9 0d		cmp #$0d	 CMP #$0D
.0cb0	f0 0d		beq $0cbf	 BEQ CRYS1
.0cb2	d0 0d		bne $0cc1	 BNE CRNO1
.0cb4	20 cf ff	jsr $ffcf	CRNO JSR CHRIN
.0cb7	c9 4e		cmp #$4e	 CMP #'N'
.0cb9	f0 06		beq $0cc1	 BEQ CRNO1
.0cbb	c9 0d		cmp #$0d	 CMP #$0D
.0cbd	f0 02		beq $0cc1	 BEQ CRNO1
.0cbf	18		clc		CRYS1 CLC
.0cc0	60		rts		 RTS
.0cc1	38		sec		CRNO1 SEC
.0cc2	60		rts		 RTS
.0cc3	a0 00		ldy #$00	INSTNO LDY #$00
.0cc5	20 cf ff	jsr $ffcf	INSTN1 JSR CHRIN
.0cc8	99 34 0c	sta $0c34,y	       STA OUF,Y
.0ccb	c8		iny		       INY
.0ccc	c9 0d		cmp #$0d	       CMP #$0D
.0cce	d0 f5		bne $0cc5	       BNE INSTN1
.0cd0	88		dey		       DEY
.0cd1	60		rts		       RTS
.0cd2	a0 00		ldy #$00	INSTNP LDY #$00
.0cd4	20 cf ff	jsr $ffcf	INSTN2 JSR CHRIN
.0cd7	99 46 0c	sta $0c46,y	       STA PUF,Y
.0cda	c8		iny		       INY
.0cdb	c9 0d		cmp #$0d	       CMP #$0D
.0cdd	d0 f5		bne $0cd4	       BNE INSTN2
.0cdf	88		dey		       DEY
.0ce0	60		rts		       RTS
.0ce1	a9 0d		lda #$0d	PRTCR  LDA #$0D    ;ASCII CR
.0ce3	4c d2 ff	jmp $ffd2	       JMP CHROUT  ;PRINT IT
=$0ce6					PRDOL = *
.0ce6	a9 24		lda #$24	       LDA #'$'
.0ce8	20 d2 ff	jsr $ffd2	       JSR CHROUT
.0ceb	60		rts		       RTS
.0cec	48		pha		PRBYTS PHA       ;PUT A ON STACK
.0ced	98		tya		       TYA       ;PUT HIH BYTE IN A
.0cee	20 f2 0c	jsr $0cf2	       JSR PRBYT ;PRINT MSB
.0cf1	68		pla		       PLA       ;GET LSB
.0cf2	48		pha		PRBYT  PHA        ;PUT BYTE ON STACK
.0cf3	4a		lsr a		       LSR A      ;4 RIGHT SHIFTS
.0cf4	4a		lsr a		       LSR A      ;TO MOVE HIGH
.0cf5	4a		lsr a		       LSR A      ;NIBBLE TO LOW
.0cf6	4a		lsr a		       LSR A      ;NIB WITH HIGH 0'S
.0cf7	a8		tay		       TAY        ;USE AS POINTER
.0cf8	b9 08 0d	lda $0d08,y	       LDA HEXA,Y ;GET ASCII
.0cfb	20 d2 ff	jsr $ffd2	       JSR CHROUT ;PRINT
.0cfe	68		pla		       PLA        ;PULL BYTE OUT
.0cff	29 0f		and #$0f	       AND #$0F   ;MASK HIGH NIBBLE
.0d01	a8		tay		       TAY        ;USE AS POINTER
.0d02	b9 08 0d	lda $0d08,y	       LDA HEXA,Y ;GET ASCII
.0d05	4c d2 ff	jmp $ffd2	       JMP CHROUT ;PRINT
>0d08	30 31 32 33 34 35 36 37		HEXA   .TEXT '0123456789ABCDEF'
>0d10	38 39 41 42 43 44 45 46

;******  Return to file: bcompare.asm


;******  End of listing
