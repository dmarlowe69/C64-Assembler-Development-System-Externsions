
; 64tass Turbo Assembler Macro V1.53.1515 listing file
; 64tass -L bobj2prgn.lst -o bobj2prgn.prg bobj2prgn.asm
; Mon Apr 23 21:37:09 2018

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: bobj2prgn.asm

=1					BSTUB = 1
>0801	0d 08				 .WORD BASIC    ;LINE LINK POINTER
>0803	0a 00				 .BYTE $0A,$00  ;LINE NUMBER (10)
>0805	9e				 .BYTE 158      ;SYS COMMAND TOKEN
>0806	28 32 30 36 33 29		 .TEXT '(2063)' ;CALL TO $080F
>080c	00				 .BYTE $00      ;END OF LINE
.080d					BASIC
>080d	00 00				 .BYTE $00,$00  ;END OF BASIC
=$ff90					SETMSG=$FF90
.080f	a9 40		lda #$40	 LDA #$40     ;ALLOW KERNAL MESSAGES
.0811	20 90 ff	jsr $ff90	 JSR SETMSG

;******  Processing file: obj2prgn.asm

=$90					STATUS=$90         ;STATUS BYTE
=$b8					LA    =$B8         ;CURRENT LOGICAL DEVICE NUMBER
=$b9					SA    =$B9         ;CURRENT SECONDARY ADDRESS
=$ba					FA    =$BA         ;CURRENT DEVICE NUMBER
=$fb					ZEROPG=$FB         ;ZERO PAGE POINTER
=$fd					ZEROUR=$FD         ;ZERO PAGE POINTER
=$ff96					TALKSA=$FF96       ;SERIAL TALK SA
=$ffa5					IECIN =$FFA5       ;SERIAL IN
=$ffab					UNTALK=$FFAB       ;SERIAL UNTALK
=$ffe1					STOP  =$FFE1       ;CHECK FOR STOP
=$ffb4					TALK  =$FFB4       ;SERIAL TALK
=$ffba					SETLFS=$FFBA       ;SET LOGICAL FILE
=$ffbd					SETNAM=$FFBD       ;SET FILENAME
=$ffc0					OPEN  =$FFC0       ;OPEN FILE
=$ffc3					CLOSE =$FFC3       ;CLOSE LOGICAL FILE
=$ffc6					CHKIN =$FFC6       ;OPEN INPUT CHANNEL
=$ffc9					CHKOUT=$FFC9       ;OPEN OUTPUT CHANNEL
=$ffcc					CLRCHN=$FFCC       ;RESET I/O CHANNELS
=$ffcf					CHRIN =$FFCF       ;GET KEYBOARD INPUT
=$ffd2					CHROUT=$FFD2       ;OUTPUT CHARACTER
=$ffb7					READST=$FFB7       ;READ I/O STATUS
=$0814					OBJPRG =*
.0814	20 cc ff	jsr $ffcc	       JSR CLRCHN    ;RSET I/O
.0817	a9 00		lda #$00	       LDA #$00      ;ZERO BYTE
.0819	8d 3d 0b	sta $0b3d	       STA RECORD    ;RECORD COUNT
.081c	8d 3e 0b	sta $0b3e	       STA RECORD+1  ;
.081f	8d 3f 0b	sta $0b3f	       STA STADD     ;START ADDRESS
.0822	85 90		sta $90		       STA STATUS    ;I/O STATUS
.0824	8d 42 0b	sta $0b42	       STA SCROPT    ;SCREEN OUTPUT OPTION
=$0827					INITD  =*
.0827	a9 02		lda #$02	       LDA #$02    ;LENGTH OF FILENAME
.0829	a0 0c		ldy #$0c	       LDY #>INIT  ;HIGH ADDRESS OF FILENAME
.082b	a2 5d		ldx #$5d	       LDX #<INIT  ;LOW ADDRESS OF FILENAME
.082d	20 bd ff	jsr $ffbd	       JSR SETNAM  ;SET FILE NAME
.0830	a9 0f		lda #$0f	       LDA #$0F    ;FILE #15
.0832	a2 08		ldx #$08	       LDX #$08    ;DEVICE #8
.0834	a0 0f		ldy #$0f	       LDY #$0F    ;SECONDARY ADDRESS #15 (CMD)
.0836	20 ba ff	jsr $ffba	       JSR SETLFS  ;SET FILE PARAMETERS
.0839	20 c0 ff	jsr $ffc0	       JSR OPEN    ;OPEN FILE
.083c	a9 0f		lda #$0f	       LDA #$0F    ;FILE #15
.083e	20 c3 ff	jsr $ffc3	       JSR CLOSE   ;CLOSE IT
.0841	20 03 0b	jsr $0b03	       JSR DISERR  ;LOW LEVEL CHECK DISK ERROR
.0844	90 03		bcc $0849	       BCC INITOK  ;IF C=0 NO ERRORS
.0846	4c 8c 0a	jmp $0a8c	       JMP QUITER  ;DISK ERROR, QUIT
=$0849					INITOK =*
.0849	a9 03		lda #$03	       LDA #$03    ;FILE #3
.084b	a2 03		ldx #$03	       LDX #$03    ;DEVICE #3
.084d	a0 00		ldy #$00	       LDY #$00    ;SECOND ADDRESS
.084f	20 ba ff	jsr $ffba	       JSR SETLFS  ;SET FILE
.0852	a9 00		lda #$00	       LDA #$00    ;GET LENGTH
.0854	a2 00		ldx #$00	       LDX #$00    ;LOW FILENAME
.0856	a0 00		ldy #$00	       LDY #$00    ;HIGH FILENAME
.0858	20 bd ff	jsr $ffbd	       JSR SETNAM  ;SET FILENAME
.085b	20 c0 ff	jsr $ffc0	       JSR OPEN    ;OPEN FILE
.085e	a2 03		ldx #$03	       LDX #$03    ;FILE #3
.0860	20 c9 ff	jsr $ffc9	       JSR CHKOUT  ;SET TO OUTPUT
.0863	a2 2f		ldx #$2f	       LDX #MSG7-MSG1 ;OFFSET FOR TITLE
.0865	20 ba 0c	jsr $0cba	       JSR PRINT      ;PRINT TITLE
.0868	a2 6e		ldx #$6e	       LDX #MSG8-MSG1 ;OFFSET FOR MSG
.086a	20 ba 0c	jsr $0cba	       JSR PRINT      ;PRG NAME:
.086d	20 fd 0c	jsr $0cfd	       JSR INSTNO  ;READ STRING INTO OBUF
.0870	a2 00		ldx #$00	PFILE0 LDX #$00
.0872	bd 5f 0c	lda $0c5f,x	PFILE1 LDA OBJM,X
.0875	99 39 0c	sta $0c39,y	       STA OUF,Y
.0878	c8		iny		       INY
.0879	e8		inx		       INX
.087a	e0 04		cpx #$04	       CPX #$04
.087c	d0 f4		bne $0872	       BNE PFILE1
.087e	8c 67 0c	sty $0c67	       STY SAVO ; LENGTH OF FILE NAME
.0881	20 1b 0d	jsr $0d1b	       JSR PRTCR  ;PRINT IT
.0884	a2 82		ldx #$82	       LDX #MSG9-MSG1 ;OFFSET FOR MSG
.0886	20 ba 0c	jsr $0cba	       JSR PRINT      ;PRG NAME:
.0889	20 0c 0d	jsr $0d0c	       JSR INSTNP  ;READ STRING INTO PBUF
.088c	a2 00		ldx #$00	PFILE2 LDX #$00
.088e	bd 63 0c	lda $0c63,x	PFILE3 LDA PROGM,X
.0891	99 4b 0c	sta $0c4b,y	       STA PUF,Y
.0894	c8		iny		       INY
.0895	e8		inx		       INX
.0896	e0 04		cpx #$04	       CPX #$04
.0898	d0 f4		bne $088e	       BNE PFILE3
.089a	8c 68 0c	sty $0c68	       STY SAVP    ; LENGTH OF FILE NAME
.089d	a9 71		lda #$71	       LDA #<MSS1  ;LOW BYTE MESSAGE
.089f	a0 0c		ldy #$0c	       LDY #>MSS1  ;HIGH BYTE MESSAGE
.08a1	20 d0 0c	jsr $0cd0	       JSR STRPNT  ;OUTPUT MESSAGE
.08a4	20 ee 0c	jsr $0cee	       JSR CRNO    ;GET KEY PRESS
.08a7	b0 07		bcs $08b0	       BCS SOP1    ;C=0 YES C=1 NO
.08a9	a9 00		lda #$00	       LDA #$00    ;ZERO
.08ab	8d 42 0b	sta $0b42	       STA SCROPT  ;PRINT TO SCREEN
.08ae	f0 05		beq $08b5	       BEQ OPENOF  ;SLIP NEXT
.08b0	a9 01		lda #$01	SOP1   LDA #$01    ;ONE
.08b2	8d 42 0b	sta $0b42	       STA SCROPT  ;NO PRINT TO SCREEN
=$08b5					OPENOF =*
.08b5	a9 07		lda #$07	       LDA #$07    ;FILE #7
.08b7	a2 08		ldx #$08	       LDX #$08    ;DEVICE #8
.08b9	a0 07		ldy #$07	       LDY #$07    ;SECOND ADDRESS
.08bb	20 ba ff	jsr $ffba	       JSR SETLFS  ;SET FILE
.08be	ad 67 0c	lda $0c67	       LDA SAVO    ;GET LENGTH
.08c1	a2 39		ldx #$39	       LDX #<OUF   ;LOW FILENAME
.08c3	a0 0c		ldy #$0c	       LDY #>OUF   ;HIGH FILENAME
.08c5	20 bd ff	jsr $ffbd	       JSR SETNAM  ;SET FILENAME
.08c8	20 c0 ff	jsr $ffc0	       JSR OPEN    ;OPEN FILE
.08cb	20 03 0b	jsr $0b03	       JSR DISERR
.08ce	90 03		bcc $08d3	       BCC OBJOK
.08d0	4c 8c 0a	jmp $0a8c	       JMP QUITER
=$08d3					OBJOK =*
.08d3	a9 08		lda #$08	       LDA #$08    ;FILE #7
.08d5	a2 08		ldx #$08	       LDX #$08    ;DEVICE #8
.08d7	a0 08		ldy #$08	       LDY #$08    ;SECOND ADDRESS
.08d9	20 ba ff	jsr $ffba	       JSR SETLFS  ;SET FILE
.08dc	ad 68 0c	lda $0c68	       LDA SAVP    ;GET LENGTH
.08df	a2 4b		ldx #$4b	       LDX #<PUF   ;LOW FILENAME
.08e1	a0 0c		ldy #$0c	       LDY #>PUF   ;HIGH FILENAME
.08e3	20 bd ff	jsr $ffbd	       JSR SETNAM  ;SET FILENAME
.08e6	20 c0 ff	jsr $ffc0	       JSR OPEN    ;OPEN FILE
.08e9	20 03 0b	jsr $0b03	       JSR DISERR
.08ec	90 03		bcc $08f1	       BCC PRGOK
.08ee	4c 8c 0a	jmp $0a8c	       JMP QUITER
=$08f1					PRGOK =*
.08f1	a2 07		ldx #$07	       LDX #$07    ;FILE #7
.08f3	20 c6 ff	jsr $ffc6	       JSR CHKIN   ;INPUT FILE
.08f6	20 1b 0d	jsr $0d1b	       JSR PRTCR  ;OUTPUT TO SCREEN
=$08f9					CKSTOP =*
.08f9	20 e1 ff	jsr $ffe1	       JSR STOP    ;CHECK STOP
.08fc	d0 03		bne $0901	       BNE OK2     ;IF NOT GO ON.
.08fe	4c 89 0a	jmp $0a89	       JMP BREAK   ;BREAK ERROR
=$0901					OK2 =*
.0901	20 20 0d	jsr $0d20	       JSR INPUT   ;INPUT CHAR
.0904	c9 3b		cmp #$3b	       CMP #';'    ;START OF RECORD
.0906	f0 03		beq $090b	       BEQ ROK     ;IF EQUAL GOOD RECORD
.0908	4c 86 0a	jmp $0a86	       JMP RERROR  ;RECORD ERROR
.090b	20 d2 ff	jsr $ffd2	ROK    JSR CHROUT  ;OUTPUT TO SCREEN
.090e	20 20 0d	jsr $0d20	       JSR INPUT   ;INPUT CHAR
.0911	8d 35 0c	sta $0c35	       STA DIGIT1  ;SAVE CHAR
.0914	20 cf ff	jsr $ffcf	       JSR CHRIN   ;INPUT CHAR
.0917	8d 36 0c	sta $0c36	       STA DIGIT2  ;SAVE CHAR
.091a	20 d7 0a	jsr $0ad7	       JSR GETBYT  ;GET BYTE
.091d	8d 3b 0b	sta $0b3b	       STA NUMBYT  ;NUMBER BYTES IN RECORD
.0920	c9 00		cmp #$00	       CMP #$00        ;IF BYTE COUNT ZERO
.0922	d0 08		bne $092c	       BNE GOON        ;NO THEN CONTINUE
.0924	a2 be		ldx #$be	       LDX #MSG16-MSG1 ;OFFSET COUNT
.0926	20 ba 0c	jsr $0cba	       JSR PRINT       ;PRINT HEADING
.0929	4c 8c 0a	jmp $0a8c	       JMP QUITER      ;DONE
=$092c					GOON =*
.092c	ad 42 0b	lda $0b42	       LDA SCROPT
.092f	d0 14		bne $0945	       BNE SKIP1
.0931	a2 95		ldx #$95	       LDX #MSG12-MSG1 ;OFFSET COUNT
.0933	20 ba 0c	jsr $0cba	       JSR PRINT       ;PRINT HEADING
.0936	ad 35 0c	lda $0c35	       LDA DIGIT1      ;GET CHAR
.0939	20 d2 ff	jsr $ffd2	       JSR CHROUT      ;PRINT IT
.093c	ad 36 0c	lda $0c36	       LDA DIGIT2      ;GET CHAR
.093f	20 d2 ff	jsr $ffd2	       JSR CHROUT      ;PRINT IT
.0942	20 1b 0d	jsr $0d1b	       JSR PRTCR       ;PRINT CR
=$0945					SKIP1 =*
.0945	20 20 0d	jsr $0d20	       JSR INPUT   ;INPUT CHAR
.0948	8d 35 0c	sta $0c35	       STA DIGIT1  ;SAVE CHAR
.094b	20 cf ff	jsr $ffcf	       JSR CHRIN   ;INPUT CHAR
.094e	8d 36 0c	sta $0c36	       STA DIGIT2  ;SAVE CHAR
.0951	20 cf ff	jsr $ffcf	       JSR CHRIN   ;INPUT CHAR
.0954	8d 37 0c	sta $0c37	       STA DIGIT3  ;SAVE CHAR
.0957	20 cf ff	jsr $ffcf	       JSR CHRIN   ;INPUT CHAR
.095a	8d 38 0c	sta $0c38	       STA DIGIT4  ;SAVE CHAR
.095d	20 a4 0a	jsr $0aa4	       JSR GETADD  ;GET BYTE
.0960	ad 3f 0b	lda $0b3f	       LDA STADD   ;CHECK START ADDRESS FLAG
.0963	d0 27		bne $098c	       BNE SKPADD  ;IF NOT ZERO WE HAVE ALREADY WRITTEN ADDRESS
.0965	a2 08		ldx #$08	       LDX #$08    ;FILE #8
.0967	20 c9 ff	jsr $ffc9	       JSR CHKOUT  ;SET TO OUTPUT
.096a	ad 6c 0c	lda $0c6c	       LDA ADDLO   ;LOW BYTE ADDRESS
.096d	20 d2 ff	jsr $ffd2	       JSR CHROUT  ;WRITE IT TO FILE
.0970	ad 6b 0c	lda $0c6b	       LDA ADDHI   ;HIGH BYTE ADDRESS
.0973	20 d2 ff	jsr $ffd2	       JSR CHROUT  ;WRITE IT TO FILE
.0976	a2 03		ldx #$03	       LDX #$03    ;FILE #3
.0978	20 c9 ff	jsr $ffc9	       JSR CHKOUT  ;SET TO OUTPUT
.097b	ad 6c 0c	lda $0c6c	       LDA ADDLO
.097e	8d 69 0c	sta $0c69	       STA RECLO  ;RECORD ADDRESS LOW BYTE
.0981	ad 6b 0c	lda $0c6b	       LDA ADDHI
.0984	8d 6a 0c	sta $0c6a	       STA RECHI  ;RECORD ADDRESS HIGH BYTE
.0987	a9 01		lda #$01	       LDA #$01    ;LOAD NONZERO VALUE
.0989	8d 3f 0b	sta $0b3f	       STA STADD   ;SET START ADDRESS FLAG
=$098c					SKPADD =*
.098c	ad 69 0c	lda $0c69	       LDA RECLO
.098f	cd 6c 0c	cmp $0c6c	       CMP ADDLO
.0992	d0 08		bne $099c	       BNE NONC
.0994	ad 6a 0c	lda $0c6a	       LDA RECHI
.0997	cd 6b 0c	cmp $0c6b	       CMP ADDHI
.099a	f0 08		beq $09a4	       BEQ YESC
=$099c					NONC = *
.099c	a2 cb		ldx #$cb	       LDX #MSG17-MSG1 ;OFFSET ADDRESS
.099e	20 ba 0c	jsr $0cba	       JSR PRINT       ;PRINT HEADING
.09a1	20 29 0d	jsr $0d29	       JSR PADIT
=$09a4					YESC =*
.09a4	ad 42 0b	lda $0b42	       LDA SCROPT
.09a7	d0 25		bne $09ce	       BNE SKIP2
.09a9	a2 8c		ldx #$8c	       LDX #MSG11-MSG1 ;OFFSET ADDRESS
.09ab	20 ba 0c	jsr $0cba	       JSR PRINT       ;PRINT HEADING
.09ae	ad 35 0c	lda $0c35	       LDA DIGIT1      ;GET CHAR
.09b1	20 d2 ff	jsr $ffd2	       JSR CHROUT      ;PRINT IT
.09b4	ad 36 0c	lda $0c36	       LDA DIGIT2      ;GET CHAR
.09b7	20 d2 ff	jsr $ffd2	       JSR CHROUT      ;PRINT IT
.09ba	ad 37 0c	lda $0c37	       LDA DIGIT3      ;GET CHAR
.09bd	20 d2 ff	jsr $ffd2	       JSR CHROUT      ;PRINT IT
.09c0	ad 38 0c	lda $0c38	       LDA DIGIT4      ;GET CHAR
.09c3	20 d2 ff	jsr $ffd2	       JSR CHROUT      ;PRINT IT
.09c6	20 1b 0d	jsr $0d1b	       JSR PRTCR       ;PRINT CR
.09c9	a2 9c		ldx #$9c	       LDX #MSG13-MSG1 ;OFFSET BYTE DATA
.09cb	20 ba 0c	jsr $0cba	       JSR PRINT       ;PRINT HEADING
=$09ce					SKIP2 =*
.09ce	a2 00		ldx #$00	       LDX #$00
.09d0	8e 3c 0b	stx $0b3c	       STX CURBYT
=$09d3					NEXTBY =*
.09d3	20 20 0d	jsr $0d20	       JSR INPUT   ;INPUT CHAR
.09d6	8d 35 0c	sta $0c35	       STA DIGIT1  ;SAVE CHAR
.09d9	20 cf ff	jsr $ffcf	       JSR CHRIN   ;INPUT CHAR
.09dc	8d 36 0c	sta $0c36	       STA DIGIT2  ;SAVE CHAR
.09df	20 d7 0a	jsr $0ad7	       JSR GETBYT  ;GET BYTE
.09e2	ae 3c 0b	ldx $0b3c	       LDX CURBYT  ;GET CURRENT BYTE COUNTER
.09e5	8d 6d 0c	sta $0c6d	       STA CURDAT  ;SAVE CURRENT BYTE
.09e8	9d ec 0d	sta $0dec,x	       STA DATA,X  ;SAVE BYTE IN RECORD BUFFER
.09eb	20 cc ff	jsr $ffcc	       JSR CLRCHN  ;RESET I/O
.09ee	a2 08		ldx #$08	       LDX #$08    ;FILE #8
.09f0	20 c9 ff	jsr $ffc9	       JSR CHKOUT  ;SET TO OUTPUT
.09f3	ad 6d 0c	lda $0c6d	       LDA CURDAT  ;DATA BYTE
.09f6	20 d2 ff	jsr $ffd2	       JSR CHROUT  ;WRITE IT TO FILE
.09f9	20 cc ff	jsr $ffcc	       JSR CLRCHN  ;RESET I/O
.09fc	a2 03		ldx #$03	       LDX #$03    ;FILE #3
.09fe	20 c9 ff	jsr $ffc9	       JSR CHKOUT  ;SET TO OUTPUT
.0a01	ad 42 0b	lda $0b42	       LDA SCROPT
.0a04	d0 11		bne $0a17	       BNE SKIP3
.0a06	ad 35 0c	lda $0c35	       LDA DIGIT1
.0a09	20 d2 ff	jsr $ffd2	       JSR CHROUT
.0a0c	ad 36 0c	lda $0c36	       LDA DIGIT2
.0a0f	20 d2 ff	jsr $ffd2	       JSR CHROUT
.0a12	a9 20		lda #$20	       LDA #' '
.0a14	20 d2 ff	jsr $ffd2	       JSR CHROUT
=$0a17					SKIP3 =*
.0a17	ae 3c 0b	ldx $0b3c	       LDX CURBYT
.0a1a	e8		inx		       INX
.0a1b	8e 3c 0b	stx $0b3c	       STX CURBYT
.0a1e	ec 3b 0b	cpx $0b3b	       CPX NUMBYT
.0a21	d0 b0		bne $09d3	       BNE NEXTBY
.0a23	20 20 0d	jsr $0d20	       JSR INPUT   ;INPUT CHAR
.0a26	8d 35 0c	sta $0c35	       STA DIGIT1  ;SAVE CHAR
.0a29	20 cf ff	jsr $ffcf	       JSR CHRIN   ;INPUT CHAR
.0a2c	8d 36 0c	sta $0c36	       STA DIGIT2  ;SAVE CHAR
.0a2f	20 cf ff	jsr $ffcf	       JSR CHRIN   ;INPUT CHAR
.0a32	8d 37 0c	sta $0c37	       STA DIGIT3  ;SAVE CHAR
.0a35	20 cf ff	jsr $ffcf	       JSR CHRIN   ;INPUT CHAR
.0a38	8d 38 0c	sta $0c38	       STA DIGIT4  ;SAVE CHAR
.0a3b	20 a4 0a	jsr $0aa4	       JSR GETADD  ;CONVERT TO WORD
.0a3e	ad 42 0b	lda $0b42	       LDA SCROPT
.0a41	d0 1d		bne $0a60	       BNE SKIP4
.0a43	a2 a7		ldx #$a7	       LDX #MSG14-MSG1 ;OFFSET ADDRESS
.0a45	20 ba 0c	jsr $0cba	       JSR PRINT       ;PRINT HEADING
.0a48	ad 35 0c	lda $0c35	       LDA DIGIT1
.0a4b	20 d2 ff	jsr $ffd2	       JSR CHROUT
.0a4e	ad 36 0c	lda $0c36	       LDA DIGIT2
.0a51	20 d2 ff	jsr $ffd2	       JSR CHROUT
.0a54	ad 37 0c	lda $0c37	       LDA DIGIT3
.0a57	20 d2 ff	jsr $ffd2	       JSR CHROUT
.0a5a	ad 38 0c	lda $0c38	       LDA DIGIT4
.0a5d	20 d2 ff	jsr $ffd2	       JSR CHROUT
=$0a60					SKIP4 =*
.0a60	20 20 0d	jsr $0d20	       JSR INPUT   ;INPUT CHAR
.0a63	ad 42 0b	lda $0b42	       LDA SCROPT
.0a66	d0 06		bne $0a6e	       BNE SKIP5
.0a68	20 d2 ff	jsr $ffd2	       JSR CHROUT  ;PRINT IT
.0a6b	20 1b 0d	jsr $0d1b	       JSR PRTCR   ;PRINT CR
=$0a6e					SKIP5 =*
.0a6e	18		clc		       CLC
.0a6f	ad 3b 0b	lda $0b3b	       LDA NUMBYT
.0a72	6d 69 0c	adc $0c69	       ADC RECLO
.0a75	8d 69 0c	sta $0c69	       STA RECLO
.0a78	a9 00		lda #$00	       LDA #$00
.0a7a	6d 6a 0c	adc $0c6a	       ADC RECHI
.0a7d	8d 6a 0c	sta $0c6a	       STA RECHI
.0a80	4c f9 08	jmp $08f9	       JMP CKSTOP  ;NEXT RECORD
=$0a83					PADERR =*
.0a83	a2 09		ldx #$09	       LDX #MSG4-MSG1 ;OFFSET ADDRESS
>0a85	2c				       .BYTE $2C      ;BIT TRICK TO SKIP
=$0a86					RERROR =*
.0a86	a2 09		ldx #$09	       LDX #MSG4-MSG1 ;OFFSET FOR MSG
>0a88	2c				       .BYTE $2C      ;BIT TRICK TO SKIP
=$0a89					BREAK =*
.0a89	a2 02		ldx #$02	       LDX #MSG2-MSG1 ;BREAK ERROR
>0a8b	2c				       .BYTE $2C      ;BIT TRICK TO SKIP
=$0a8c					QUITER =*
.0a8c	a2 b1		ldx #$b1	       LDX #MSG15-MSG1 ;END OF FILE
.0a8e	20 ba 0c	jsr $0cba	       JSR PRINT   ;PRINT HEADING
.0a91	a9 03		lda #$03	       LDA #$03    ;FILE #7
.0a93	20 c3 ff	jsr $ffc3	       JSR CLOSE   ;CLOSE
.0a96	a9 07		lda #$07	       LDA #$07    ;FILE #7
.0a98	20 c3 ff	jsr $ffc3	       JSR CLOSE   ;CLOSE
.0a9b	a9 08		lda #$08	       LDA #$08    ;FILE #7
.0a9d	20 c3 ff	jsr $ffc3	       JSR CLOSE   ;CLOSE
.0aa0	20 cc ff	jsr $ffcc	       JSR CLRCHN  ;RESET I/O
.0aa3	60		rts		       RTS         ;BACK TO BASIC
=$0aa4					GETADD =*
.0aa4	ad 35 0c	lda $0c35	       LDA DIGIT1
.0aa7	20 ee 0a	jsr $0aee	       JSR BYTASC  ;GET HIGH NIBBLE
.0aaa	0a		asl a		       ASL A       ;LEFT JUSTIFY
.0aab	0a		asl a		       ASL A       ; ASCII CHAR
.0aac	0a		asl a		       ASL A       ;  IN HIGH
.0aad	0a		asl a		       ASL A       ;   NIBBLE
.0aae	8d 41 0b	sta $0b41	       STA TEMP    ;STORE
.0ab1	ad 36 0c	lda $0c36	       LDA DIGIT2  ;INPUT CHAR
.0ab4	20 ee 0a	jsr $0aee	       JSR BYTASC  ;CREATE LOW NIB
.0ab7	0d 41 0b	ora $0b41	       ORA TEMP         ;PUT IN PLACE
.0aba	8d 6b 0c	sta $0c6b	       STA ADDHI        ;HIGH NIBBLE
.0abd	ad 37 0c	lda $0c37	       LDA DIGIT3
.0ac0	20 ee 0a	jsr $0aee	       JSR BYTASC  ;GET HIGH NIBBLE
.0ac3	0a		asl a		       ASL A       ;LEFT JUSTIFY
.0ac4	0a		asl a		       ASL A       ; ASCII CHAR
.0ac5	0a		asl a		       ASL A       ;  IN HIGH
.0ac6	0a		asl a		       ASL A       ;   NIBBLE
.0ac7	8d 41 0b	sta $0b41	       STA TEMP    ;STORE
.0aca	ad 38 0c	lda $0c38	       LDA DIGIT4  ;INPUT CHAR
.0acd	20 ee 0a	jsr $0aee	       JSR BYTASC  ;CREATE LOW NIB
.0ad0	0d 41 0b	ora $0b41	       ORA TEMP    ;PUT IN PLACE
.0ad3	8d 6c 0c	sta $0c6c	       STA ADDLO   ;LO NIBBLE
.0ad6	60		rts		       RTS         ;RETURN
=$0ad7					GETBYT =*
.0ad7	ad 35 0c	lda $0c35	       LDA DIGIT1
.0ada	20 ee 0a	jsr $0aee	       JSR BYTASC  ;GET HIGH NIBBLE
.0add	0a		asl a		       ASL A       ;LEFT JUSTIFY
.0ade	0a		asl a		       ASL A       ; ASCII CHAR
.0adf	0a		asl a		       ASL A       ;  IN HIGH
.0ae0	0a		asl a		       ASL A       ;   NIBBLE
.0ae1	8d 41 0b	sta $0b41	       STA TEMP    ;STORE
.0ae4	ad 36 0c	lda $0c36	       LDA DIGIT2  ;INPUT CHAR
.0ae7	20 ee 0a	jsr $0aee	       JSR BYTASC  ;CREATE LOW NIB
.0aea	0d 41 0b	ora $0b41	       ORA TEMP    ;PUT IN PLACE
.0aed	60		rts		       RTS         ;RETURN
.0aee	c9 3a		cmp #$3a	BYTASC CMP #$3A    ;IS CHAR >9
.0af0	08		php		       PHP         ;PUSH P
.0af1	29 0f		and #$0f	       AND #$0F    ;MASK HIGH BYTE
.0af3	28		plp		       PLP         ;PULL P
.0af4	90 02		bcc $0af8	       BCC EXIT1   ;IF <=9 OK
.0af6	69 08		adc #$08	       ADC #$08    ;ADD OFFSET
.0af8	60		rts		EXIT1  RTS         ;RETURN
.0af9	18		clc		CHGASC CLC         ;CLEAR CARRY
.0afa	69 f6		adc #$f6	       ADC #$F6    ;ADD OFFSET
.0afc	90 02		bcc $0b00	       BCC NOSIX   ;IF C=0 OK
.0afe	69 06		adc #$06	       ADC #$06    ;ADD OFFSSET
.0b00	69 3a		adc #$3a	NOSIX  ADC #$3A    ;ADD OFFSET
.0b02	60		rts		       RTS         ;RETURN
.0b03	a9 08		lda #$08	DISERR LDA #$08    ;DEV #8
.0b05	85 ba		sta $ba		       STA FA      ;PUT IN DEV TABLE
.0b07	20 b4 ff	jsr $ffb4	       JSR TALK    ;SEND TALK
.0b0a	a9 6f		lda #$6f	       LDA #$6F    ;SECONDARY ADDRESS
.0b0c	85 b9		sta $b9		       STA SA      ;PUT IN TABLE
.0b0e	20 96 ff	jsr $ff96	       JSR TALKSA  ;SEND SEC
.0b11	20 a5 ff	jsr $ffa5	       JSR IECIN   ;GET FIRST BYTE
.0b14	c9 30		cmp #$30	       CMP #'0'    ;IS IT A ZERO
.0b16	d0 0c		bne $0b24	       BNE DLOOC   ;IF NOT ZERO ERROR
.0b18	20 a5 ff	jsr $ffa5	DLOOE  JSR IECIN   ;GET BYTE
.0b1b	c9 0d		cmp #$0d	       CMP #$0D    ;IS IT CR?
.0b1d	d0 f9		bne $0b18	       BNE DLOOE   ;GET NEXT BYTE
.0b1f	20 ab ff	jsr $ffab	       JSR UNTALK  ;UNTALK
.0b22	18		clc		       CLC         ;NO ERROR FLAG
.0b23	60		rts		       RTS         ;RETURN
.0b24	48		pha		DLOOC  PHA         ;STACK BYTE
.0b25	20 1b 0d	jsr $0d1b	       JSR PRTCR   ;PRINT CR
.0b28	68		pla		       PLA         ;GET BYTE
.0b29	20 d2 ff	jsr $ffd2	       JSR CHROUT  ;PRINT IT
.0b2c	20 a5 ff	jsr $ffa5	DLOOA  JSR IECIN   ;GET NEXT BYTE
.0b2f	20 d2 ff	jsr $ffd2	       JSR CHROUT  ;PRINT IT
.0b32	c9 0d		cmp #$0d	       CMP #$0D    ;IS IT CR
.0b34	d0 f6		bne $0b2c	       BNE DLOOA   ;GET NEXT BYTE
.0b36	20 ab ff	jsr $ffab	       JSR UNTALK  ;UNTALK
.0b39	38		sec		       SEC         ;SET ERROR FLAG
.0b3a	60		rts		       RTS         ;RETURN
>0b3b	aa				NUMBYT .BYTE $AA   ;NUMBER BYTES
>0b3c	aa				CURBYT .BYTE $AA   ;CURRENT BYTE IN RECORD
>0b3d	aa aa				RECORD .WORD $AAAA ;RECORD NUMBER
>0b3f	aa				STADD  .BYTE $AA   ;START ADDRESS
>0b40	aa				COUNT  .BYTE $AA   ;COUNTER
>0b41	aa				TEMP   .BYTE $AA   ;TEMPOARY
>0b42	aa				SCROPT .BYTE $AA   ;SCREEN OUPUT OPTION
>0b43	aa				COUNT1 .BYTE $AA    ;COUNTER
>0b44	0d 8d				MSG1 .BYTE $0D,$8D
>0b46	0d				MSG2 .BYTE $0D
>0b47	42 52 45 41 4b 8d		.TEXT 'BREAK',$8D
>0b4d	0d				MSG4 .BYTE $0D
>0b4e	42 41 44 20 52 45 43 4f		.TEXT 'BAD RECORD',$8D
>0b56	52 44 8d
>0b59	0d				MSG5 .BYTE $0D
>0b5a	43 48 45 43 4b 53 55 4d		.TEXT 'CHECKSUM ERRO',$D2
>0b62	20 45 52 52 4f d2
>0b68	0d				MSG6 .BYTE $0D
>0b69	46 49 4c 45 20 45 52 52		.TEXT 'FILE ERRO',$D2
>0b71	4f d2
>0b73	0d 0d 0d			MSG7 .BYTE $0D,$0D,$0D
>0b76	4f 42 4a 32 50 52 47 2e		.TEXT 'OBJ2PRG.C64 V072882'
>0b7e	43 36 34 20 56 30 37 32 38 38 32
>0b89	0d				.BYTE $0D
>0b8a	28 43 29 20 31 39 38 32		.TEXT '(C) 1982 BY COMMODORE BUSINESS '
>0b92	20 42 59 20 43 4f 4d 4d 4f 44 4f 52 45 20 42 55
>0ba2	53 49 4e 45 53 53 20
>0ba9	4d 41 43 48 49 4e 45 53		.TEXT 'MACHINES'
>0bb1	a0				.BYTE $A0
>0bb2	0d				MSG8 .BYTE $0D
>0bb3	4f 42 4a 45 43 54 20 46		.TEXT 'OBJECT FILE NAME ?',$A0
>0bbb	49 4c 45 20 4e 41 4d 45 20 3f a0
>0bc6	0d				MSG9 .BYTE $0D
>0bc7	50 52 47 20 4e 41 4d 45		.TEXT 'PRG NAME',$BA
>0bcf	ba
>0bd0	0d				MSG11 .BYTE $0D
>0bd1	41 44 44 52 45 53 53 a0		.TEXT 'ADDRESS',$A0
>0bd9	0d				MSG12 .BYTE $0D
>0bda	43 4f 55 4e 54 a0		.TEXT 'COUNT',$A0
>0be0	0d				MSG13 .BYTE $0D
>0be1	42 59 54 45 20 44 41 54		.TEXT 'BYTE DATA',$8D
>0be9	41 8d
>0beb	0d				MSG14 .BYTE $0D
>0bec	43 48 45 43 4b 53 55 4d		.TEXT 'CHECKSUM',$A0
>0bf4	a0
>0bf5	0d				MSG15 .BYTE $0D
>0bf6	45 4e 44 20 4f 46 20 46		.TEXT 'END OF FILE',$8D
>0bfe	49 4c 45 8d
>0c02	0d				MSG16 .BYTE $0D
>0c03	4c 41 53 54 20 52 45 43		.TEXT 'LAST RECORD',$8D
>0c0b	4f 52 44 8d
>0c0f	0d				MSG17 .BYTE $0D
>0c10	46 49 4c 45 20 49 53 20		.TEXT 'FILE IS NON CONTIGUOUS',$8D
>0c18	4e 4f 4e 20 43 4f 4e 54 49 47 55 4f 55 53 8d
>0c27	0d				MSG18 .BYTE $0D
>0c28	50 41 44 44 49 4e 47 20		.TEXT 'PADDING FILE',$8D
>0c30	46 49 4c 45 8d
>0c35	aa				DIGIT1 .BYTE $AA
>0c36	aa				DIGIT2 .BYTE $AA
>0c37	aa				DIGIT3 .BYTE $AA
>0c38	aa				DIGIT4 .BYTE $AA
>0c39	aa aa aa aa aa aa		OUF .BYTE $AA,$AA,$AA,$AA,$AA,$AA
>0c3f	aa aa aa aa aa aa		.BYTE $AA,$AA,$AA,$AA,$AA,$AA
>0c45	aa aa aa aa aa aa		.BYTE $AA,$AA,$AA,$AA,$AA,$AA
>0c4b	aa aa aa aa aa aa		PUF .BYTE $AA,$AA,$AA,$AA,$AA,$AA
>0c51	aa aa aa aa aa aa		.BYTE $AA,$AA,$AA,$AA,$AA,$AA
>0c57	aa aa aa aa aa aa		.BYTE $AA,$AA,$AA,$AA,$AA,$AA
>0c5d	49 30				INIT  .TEXT 'I0'
>0c5f	2c 53 2c 52			OBJM  .TEXT ',S,R'
>0c63	2c 50 2c 57			PROGM .TEXT ',P,W'
>0c67	aa				SAVO .BYTE $AA
>0c68	aa				SAVP .BYTE $AA
>0c69	aa				RECLO .BYTE $AA
>0c6a	aa				RECHI .BYTE $AA
>0c6b	aa				ADDHI  .BYTE $AA
>0c6c	aa				ADDLO  .BYTE $AA
>0c6d	aa				CURDAT .BYTE $AA
>0c6e	00 00				NUMPAD .WORD $0000
>0c70	aa				PADBYT .BYTE $AA
>0c71	0d				MSS1 .BYTE $0D
>0c72	4f 55 54 50 55 54 20 54		 .TEXT 'OUTPUT TO SCREEN (Y OR N/CR)? '
>0c7a	4f 20 53 43 52 45 45 4e 20 28 59 20 4f 52 20 4e
>0c8a	2f 43 52 29 3f 20
>0c90	00				 .BYTE 0
>0c91	0d				MSE1 .BYTE $0D
>0c92	50 41 44 44 49 4e 47 20		.TEXT 'PADDING NEGATIVE - PRG '
>0c9a	4e 45 47 41 54 49 56 45 20 2d 20 50 52 47 20
>0ca9	46 49 4c 45 20 49 4e 43		.TEXT 'FILE INCOMPLETE',$0D
>0cb1	4f 4d 50 4c 45 54 45 0d
>0cb9	00				.BYTE 0
.0cba	8e 40 0b	stx $0b40	PRINT  STX COUNT   ;PUT X IN COUNT
.0cbd	ae 40 0b	ldx $0b40	PLOOP  LDX COUNT   ;LOAD X FROM COUNT
.0cc0	bd 44 0b	lda $0b44,x	       LDA MSG1,X  ;LOAD CHAR
.0cc3	08		php		       PHP         ;SAVE STATUS FLAG
.0cc4	29 7f		and #$7f	       AND #$7F    ;MASK BIT 8
.0cc6	20 d2 ff	jsr $ffd2	       JSR CHROUT  ;PRINT CHAR
.0cc9	ee 40 0b	inc $0b40	       INC COUNT   ;INC OFFSET
.0ccc	28		plp		       PLP         ;GET STATUS FLAG
.0ccd	10 ee		bpl $0cbd	       BPL PLOOP   ;IF BIT 8 ZERO
.0ccf	60		rts		       RTS         ;RETURN
.0cd0	85 fd		sta $fd		STRPNT STA ZEROUR     ;POINTER TO
.0cd2	84 fe		sty $fe		       STY ZEROUR+1   ;MESSAGE
.0cd4	a0 00		ldy #$00	       LDY #$00       ;OFFSET
.0cd6	b1 fd		lda ($fd),y	SOUT   LDA (ZEROUR),Y ;GET CHAR
.0cd8	f0 06		beq $0ce0	       BEQ SEXIT      ;IF ZERO EXIT
.0cda	20 d2 ff	jsr $ffd2	       JSR CHROUT     ;PRINT
.0cdd	c8		iny		       INY            ;INC OFFSET
.0cde	d0 f6		bne $0cd6	       BNE SOUT       ;LOOP
.0ce0	60		rts		SEXIT  RTS            ;RETURN
.0ce1	20 cf ff	jsr $ffcf	CRYS JSR CHRIN
.0ce4	c9 59		cmp #$59	 CMP #'Y'
.0ce6	f0 11		beq $0cf9	 BEQ CRYS1
.0ce8	c9 0d		cmp #$0d	 CMP #$0D
.0cea	f0 0d		beq $0cf9	 BEQ CRYS1
.0cec	d0 0d		bne $0cfb	 BNE CRNO1
.0cee	20 cf ff	jsr $ffcf	CRNO JSR CHRIN
.0cf1	c9 4e		cmp #$4e	 CMP #'N'
.0cf3	f0 06		beq $0cfb	 BEQ CRNO1
.0cf5	c9 0d		cmp #$0d	 CMP #$0D
.0cf7	f0 02		beq $0cfb	 BEQ CRNO1
.0cf9	18		clc		CRYS1 CLC
.0cfa	60		rts		 RTS
.0cfb	38		sec		CRNO1 SEC
.0cfc	60		rts		 RTS
.0cfd	a0 00		ldy #$00	INSTNO LDY #$00
.0cff	20 cf ff	jsr $ffcf	INSTN1 JSR CHRIN
.0d02	99 39 0c	sta $0c39,y	       STA OUF,Y
.0d05	c8		iny		       INY
.0d06	c9 0d		cmp #$0d	       CMP #$0D
.0d08	d0 f5		bne $0cff	       BNE INSTN1
.0d0a	88		dey		       DEY
.0d0b	60		rts		       RTS
.0d0c	a0 00		ldy #$00	INSTNP LDY #$00
.0d0e	20 cf ff	jsr $ffcf	INSTN2 JSR CHRIN
.0d11	99 4b 0c	sta $0c4b,y	       STA PUF,Y
.0d14	c8		iny		       INY
.0d15	c9 0d		cmp #$0d	       CMP #$0D
.0d17	d0 f5		bne $0d0e	       BNE INSTN2
.0d19	88		dey		       DEY
.0d1a	60		rts		       RTS
.0d1b	a9 0d		lda #$0d	PRTCR  LDA #$0D    ;ASCII CR
.0d1d	4c d2 ff	jmp $ffd2	       JMP CHROUT  ;PRINT IT
=$0d20					INPUT = *
.0d20	a2 07		ldx #$07	       LDX #$07    ;FILE #7
.0d22	20 c6 ff	jsr $ffc6	       JSR CHKIN   ;INPUT FILE
.0d25	20 cf ff	jsr $ffcf	       JSR CHRIN   ;INPUT CHAR
.0d28	60		rts		       RTS
=$0d29					PADIT =*
.0d29	a2 e3		ldx #$e3	       LDX #MSG18-MSG1 ;OFFSET ADDRESS
.0d2b	20 ba 0c	jsr $0cba	       JSR PRINT       ;PRINT HEADING
.0d2e	38		sec		       SEC             ;SUBTRACK
.0d2f	ad 6c 0c	lda $0c6c	       LDA ADDLO       ;EXPECTED ADDRESS
.0d32	ed 69 0c	sbc $0c69	       SBC RECLO       ;FROM RECORD
.0d35	8d 6e 0c	sta $0c6e	       STA NUMPAD      ;ADDRESS TO
.0d38	ad 6b 0c	lda $0c6b	       LDA ADDHI       ;DETERMINE
.0d3b	ed 6a 0c	sbc $0c6a	       SBC RECHI       ;NUMBER OF BYTES
.0d3e	8d 6f 0c	sta $0c6f	       STA NUMPAD+1    ;TO PAD
.0d41	b0 0c		bcs $0d4f	       BCS DECPAD
.0d43	a9 91		lda #$91	       LDA #<MSE1  ;LOW BYTE MESSAGE
.0d45	a0 0c		ldy #$0c	       LDY #>MSE1  ;HIGH BYTE MESSAGE
.0d47	20 d0 0c	jsr $0cd0	       JSR STRPNT  ;OUTPUT MESSAGE
.0d4a	68		pla		       PLA         ;PULL RETURN ADDRESS OFF STACK
.0d4b	68		pla		       PLA         ;SO RTS IN ERROR ROUTINE IS TO
.0d4c	4c 83 0a	jmp $0a83	       JMP PADERR
=$0d4f					DECPAD =*
.0d4f	ad 6e 0c	lda $0c6e	       LDA NUMPAD
.0d52	d0 03		bne $0d57	       BNE DECPA1
.0d54	ce 6f 0c	dec $0c6f	       DEC NUMPAD+1
.0d57	ce 6e 0c	dec $0c6e	DECPA1 DEC NUMPAD
.0d5a	ac 6f 0c	ldy $0c6f	       LDY NUMPAD+1    ;PRINT NUMBER
.0d5d	ad 6e 0c	lda $0c6e	       LDA NUMPAD      ;OF PADDING
.0d60	20 c0 0d	jsr $0dc0	       JSR PRBYTS      ;BYTES
.0d63	20 1b 0d	jsr $0d1b	       JSR PRTCR       ;NEW LINE
.0d66	18		clc		       CLC             ;ADD NUMBER OF
.0d67	ad 69 0c	lda $0c69	       LDA RECLO       ;PADDED BYTES
.0d6a	6d 6e 0c	adc $0c6e	       ADC NUMPAD      ;TO PREVIOUS RECORD
.0d6d	8d 69 0c	sta $0c69	       STA RECLO       ;ADDRESS FOR NEXT
.0d70	ad 6a 0c	lda $0c6a	       LDA RECLO+1     ;RECORD CHECK
.0d73	6d 6f 0c	adc $0c6f	       ADC NUMPAD+1    ;
.0d76	8d 6a 0c	sta $0c6a	       STA RECLO+1     ;
.0d79	18		clc		       CLC             ;INCREMENT
.0d7a	ad 69 0c	lda $0c69	       LDA RECLO       ;ADDRESS
.0d7d	69 01		adc #$01	       ADC #$01        ;BY ONE
.0d7f	8d 69 0c	sta $0c69	       STA RECLO       ;TO ADVANCE PAST
.0d82	ad 6a 0c	lda $0c6a	       LDA RECLO+1     ;PADDING TO NEXT
.0d85	69 00		adc #$00	       ADC #$00        ;ACTIVE ADDRESS
.0d87	8d 6a 0c	sta $0c6a	       STA RECLO+1     ;
.0d8a	ac 6a 0c	ldy $0c6a	       LDY RECLO+1     ;PRINT WHAT
.0d8d	ad 69 0c	lda $0c69	       LDA RECLO       ;NEXT RECORD
.0d90	20 c0 0d	jsr $0dc0	       JSR PRBYTS      ;ADDRESS SHOULD BE
.0d93	20 1b 0d	jsr $0d1b	       JSR PRTCR       ;NEW LINE
.0d96	20 cc ff	jsr $ffcc	       JSR CLRCHN      ;RESET I/O
.0d99	a2 08		ldx #$08	       LDX #$08        ;FILE #8
.0d9b	20 c9 ff	jsr $ffc9	       JSR CHKOUT      ;SET TO OUTPUT
=$0d9e					PADIT1 =*
.0d9e	ad 70 0c	lda $0c70	       LDA PADBYT      ;PADDING BYTE
.0da1	20 d2 ff	jsr $ffd2	       JSR CHROUT      ;WRITE IT TO FILE
.0da4	ad 6e 0c	lda $0c6e	       LDA NUMPAD
.0da7	d0 08		bne $0db1	       BNE PADIT2
.0da9	ad 6f 0c	lda $0c6f	       LDA NUMPAD+1
.0dac	f0 09		beq $0db7	       BEQ PADIT3      ;KICKS IT OUT WHEN BOTH ARE 0
.0dae	ce 6f 0c	dec $0c6f	       DEC NUMPAD+1
.0db1	ce 6e 0c	dec $0c6e	PADIT2 DEC NUMPAD
.0db4	18		clc		       CLC
.0db5	90 e7		bcc $0d9e	       BCC PADIT1
=$0db7					PADIT3 =*
.0db7	20 cc ff	jsr $ffcc	       JSR CLRCHN  ;RESET I/O
.0dba	a2 03		ldx #$03	       LDX #$03    ;FILE #3
.0dbc	20 c9 ff	jsr $ffc9	       JSR CHKOUT  ;SET TO OUTPUT
.0dbf	60		rts		       RTS
.0dc0	48		pha		PRBYTS PHA       ;PUT A ON STACK
.0dc1	98		tya		       TYA       ;PUT HIH BYTE IN A
.0dc2	20 c6 0d	jsr $0dc6	       JSR PRBYT ;PRINT MSB
.0dc5	68		pla		       PLA       ;GET LSB
.0dc6	48		pha		PRBYT  PHA        ;PUT BYTE ON STACK
.0dc7	4a		lsr a		       LSR A      ;4 RIGHT SHIFTS
.0dc8	4a		lsr a		       LSR A      ;TO MOVE HIGH
.0dc9	4a		lsr a		       LSR A      ;NIBBLE TO LOW
.0dca	4a		lsr a		       LSR A      ;NIB WITH HIGH 0'S
.0dcb	a8		tay		       TAY        ;USE AS POINTER
.0dcc	b9 dc 0d	lda $0ddc,y	       LDA HEXA,Y ;GET ASCII
.0dcf	20 d2 ff	jsr $ffd2	       JSR CHROUT ;PRINT
.0dd2	68		pla		       PLA        ;PULL BYTE OUT
.0dd3	29 0f		and #$0f	       AND #$0F   ;MASK HIGH NIBBLE
.0dd5	a8		tay		       TAY        ;USE AS POINTER
.0dd6	b9 dc 0d	lda $0ddc,y	       LDA HEXA,Y ;GET ASCII
.0dd9	4c d2 ff	jmp $ffd2	       JMP CHROUT ;PRINT
>0ddc	30 31 32 33 34 35 36 37		HEXA   .TEXT '0123456789ABCDEF'
>0de4	38 39 41 42 43 44 45 46
>0dec	aa aa aa aa aa aa		DATA .BYTE $AA,$AA,$AA,$AA,$AA,$AA
>0df2	aa aa aa aa aa aa		.BYTE $AA,$AA,$AA,$AA,$AA,$AA
>0df8	aa aa aa aa aa aa		.BYTE $AA,$AA,$AA,$AA,$AA,$AA
>0dfe	aa aa aa aa aa aa		.BYTE $AA,$AA,$AA,$AA,$AA,$AA
>0e04	aa aa aa aa aa aa		.BYTE $AA,$AA,$AA,$AA,$AA,$AA
>0e0a	aa aa aa aa aa aa		.BYTE $AA,$AA,$AA,$AA,$AA,$AA
>0e10	aa aa aa aa aa aa		.BYTE $AA,$AA,$AA,$AA,$AA,$AA
>0e16	aa aa aa aa aa aa		.BYTE $AA,$AA,$AA,$AA,$AA,$AA

;******  Return to file: bobj2prgn.asm


;******  End of listing
