;*********************************;;         PRG2BYTE64;      PRG2BYTE.C64 V072882;     CONVERT PROGRAM FILE;  TO ASSEMBLER64 SOURCE FILE;          BYTE,WORD ;; (C) 1982 BY COMMODORE MACHINES;;  WRITTEN BY DENTON MARLOWE;*********************************; MAIN BODY OF CODE;*********************************; ZEROPAGE USAGE EQUATES;*********************************STATUS=$90         ;STATUS BYTELA    =$B8         ;CURRENT LOGICAL DEVICE NUMBERSA    =$B9         ;CURRENT SECONDARY ADDRESSFA    =$BA         ;CURRENT DEVICE NUMBERZEROPG=$FB         ;ZERO PAGE POINTERZEROUR=$FD         ;ZERO PAGE POINTER;*********************************; KERNAL JMUP TABLE EQUATES;*********************************TALKSA=$FF96       ;SERIAL TALK SAIECIN =$FFA5       ;SERIAL INUNTALK=$FFAB       ;SERIAL UNTALKSTOP  =$FFE1       ;CHECK FOR STOPTALK  =$FFB4       ;SERIAL TALKSETLFS=$FFBA       ;SET LOGICAL FILESETNAM=$FFBD       ;SET FILENAMEOPEN  =$FFC0       ;OPEN FILECLOSE =$FFC3       ;CLOSE LOGICAL FILECHKIN =$FFC6       ;OPEN INPUT CHANNELCHKOUT=$FFC9       ;OPEN OUTPUT CHANNELCLRCHN=$FFCC       ;RESET I/O CHANNELSCHRIN =$FFCF       ;GET KEYBOARD INPUTCHROUT=$FFD2       ;OUTPUT CHARACTERGETIN =$FFE4       ;GET KEYBOARD CHARREADST=$FFB7       ;READ I/O STATUS;*********************************;; PRG2BYTE ENTRY POINT;;*********************************PRG2BY =*       JSR CLRCHN    ;RSET I/O       LDA #$00      ;ZERO BYTE       STA RECORD    ;RECORD COUNT       STA RECORD+1  ;       STA STADD     ;START ADDRESS       STA STATUS    ;I/O STATUS       STA SCROPT    ;SCREEN OUTPUT OPTION       STA RECHI       STA RECLO       STA CHKSUM       STA CHKSUM+1;*********************************; INIT DISK;*********************************INITD  =*       LDA #$02    ;LENGTH OF FILENAME       LDY #>INIT  ;HIGH ADDRESS OF FILENAME       LDX #<INIT  ;LOW ADDRESS OF FILENAME       JSR SETNAM  ;SET FILE NAME       LDA #$0F    ;FILE #15       LDX #$08    ;DEVICE #8       LDY #$0F    ;SECONDARY ADDRESS #15 (CMD)       JSR SETLFS  ;SET FILE PARAMETERS       JSR OPEN    ;OPEN FILE       LDA #$0F    ;FILE #15       JSR CLOSE   ;CLOSE IT       JSR DISERR  ;LOW LEVEL CHECK DISK ERROR       BCC INITOK  ;IF C=0 NO ERRORS       JMP QUITER  ;DISK ERROR, QUIT;*********************************; OPEN FILE TO SCREEN;*********************************INITOK =*       LDA #$03      ;FILE #3       LDX #$03      ;DEVICE #3       LDY #$00      ;SECOND ADDRESS       JSR SETLFS    ;SET FILE;       LDA #$00      ;GET LENGTH       LDX #$00      ;LOW FILENAME       LDY #$00      ;HIGH FILENAME       JSR SETNAM    ;SET FILENAME       JSR OPEN      ;OPEN FILE        LDX #$03      ;FILE #3       JSR CHKOUT    ;SET TO OUTPUT;*********************************; PRINT TITLE;*********************************       LDX #MSG7-MSG1 ;OFFSET FOR TITLE       JSR PRINT      ;PRINT TITLE;*********************************; PROMPT FOR PRG FILENAME;*********************************       LDX #MSG9-MSG1 ;OFFSET FOR MSG       JSR PRINT      ;PRG NAME:;*********************************; READ IN PRG FILE NAME;*********************************       JSR INSTNP;*********************************       LDA #$00   ;NULL       STA SUF,Y  ;TERMINATE FILENAME;*********************************; APPEND ,P,R;*********************************PFILE2 LDX #$00PFILE3 LDA PROGM,X       STA PUF,Y       INY       INX       CPX #$04       BNE PFILE3       STY SAVP    ; LENGTH OF FILE NAME;*********************************; OUTPUT CARRAIGE RETURN;*********************************       JSR PRTCR   ;PRINT CR;*********************************; PROMPT FOR ASM FILENAME;*********************************       LDX #MSG8-MSG1 ;OFFSET FOR MSG       JSR PRINT      ;PRG NAME:;*********************************; READ IN SOURCE FILE NAME;*********************************       JSR INSTNO;*********************************; APPEND ,S,W;*********************************PFILE0 LDX #$00PFILE1 LDA SRCM,X       STA OUF,Y       INY       INX       CPX #$04       BNE PFILE1       STY SAVO ; LENGTH OF FILE NAME;*********************************; NEW LINE;*********************************       JSR PRTCR   ;PRINT CR;*********************************; SCREEN OUTPUT OPTION (VERBOSE);*********************************       LDA #<MSS1  ;LOW BYTE MESSAGE       LDY #>MSS1  ;HIGH BYTE MESSAGE       JSR STRPNT  ;OUTPUT MESSAGE       JSR CRNO    ;GET KEY PRESS       BCS SOP1    ;C=0 YES C=1 NO       LDA #$00    ;ZERO       STA SCROPT  ;PRINT TO SCREEN       BEQ OPENPF  ;SKIP NEXTSOP1   LDA #$01    ;ONE       STA SCROPT  ;NO PRINT TO SCREEN ;*********************************; DIRECTIVE FORMAT OPTION;*********************************OPENPF =*;*********************************; OUTPUT CARRAIGE RETURN;*********************************       JSR PRTCR   ;PRINT CR;*********************************; DIRECTIVE FORMAT OPTION;*********************************       LDA #'0'       STA DIROPT       JSR IDIROP;*********************************; OUTPUT CARRAIGE RETURN;*********************************       JSR PRTCR   ;PRINT CR;*********************************; DIRECTIVE NUMBER DATA ELEMENTS;*********************************       JSR SETDEF       JSR NOTABS;*********************************; OUTPUT CARRAIGE RETURN;*********************************       JSR PRTCR   ;PRINT CR;*********************************; OPEN PROGRAM FILE;*********************************;OPENPF =*       LDA #$08    ;FILE #7       LDX #$08    ;DEVICE #8       LDY #$08    ;SECOND ADDRESS       JSR SETLFS  ;SET FILE;       LDA SAVP    ;GET LENGTH       LDX #<PUF   ;LOW FILENAME       LDY #>PUF   ;HIGH FILENAME       JSR SETNAM  ;SET FILENAME       JSR OPEN    ;OPEN FILE;       JSR DISERR       BCC PRGOK       JMP QUITER;*********************************; OPEN SOURCE FILE;*********************************PRGOK =*       LDA #$07    ;FILE #7       LDX #$08    ;DEVICE #8       LDY #$07    ;SECOND ADDRESS       JSR SETLFS  ;SET FILE;       LDA SAVO    ;GET LENGTH       LDX #<OUF   ;LOW FILENAME       LDY #>OUF   ;HIGH FILENAME       JSR SETNAM  ;SET FILENAME;       JSR OPEN    ;OPEN FILE;       JSR DISERR       BCC SRCOK       JMP QUITER;*********************************; SET INPUT TO PROGRAM FILE;*********************************SRCOK =*       LDX #$08    ;FILE #8       JSR CHKIN   ;INPUT FILE;*********************************; NEW LINE;*********************************       JSR PRTCR   ;PRINT CR;*********************************; READ IN START ADDRESS FROM FILE;*********************************       JSR CHRIN  ;LOW BYTE START ADDRESS       STA ADDLO       JSR CHRIN  ;HIGH BYTE START ADDRESS       STA ADDHI;*********************************;;*********************************       LDA ADDLO       STA STADD       STA CUADD       STA ENADD       LDA ADDHI       STA STADD+1       STA CUADD+1       STA ENADD+1;*********************************; PRINT HEADER WITH PRG FILENAME;*********************************; CHECK SCREEN OUTPUT OPTIONS; 0 = NO SCREEN; 1 = SCREEN OUTPUT;*********************************       LDA SCROPT       BNE PRTFIL;*********************************; SET OUTPUT CHANNEL TO SCREEN;*********************************       LDX #$03      ;FILE #Y       JSR CHKOUT    ;SET TO OUTPUT       JSR PRHEAD    ;PRINT HEADER;*********************************; SET OUTPUT CHANNEL TO ASM FILE;*********************************PRTFIL LDX #$07      ;FILE #Y       JSR CHKOUT    ;SET TO OUTPUT       JSR PRHEAD    ;PRINT HEADER;*********************************; SET OUTPUT CHANNEL TO SCREEN;*********************************       LDX #$03      ;FILE #Y       JSR CHKOUT    ;SET TO OUTPUT;*********************************; CHECK FORMAT OPTIONS;*********************************       LDA DIROPT       CMP #'0'       BEQ CKSTOP       CMP #'1'       BEQ WEDOWD       CMP #'2'       BEQ WEDODB;*********************************; DBYTE DIRECTIVE;*********************************WEDOWD=*       JSR DOWRD       JMP FOOT;      JMP ENDFIL;*********************************; DBYTE DIRECTIVE;*********************************WEDODB=*       JSR DODBY       JMP FOOT;      JMP ENDFIL;*********************************; BEGIN BUILDING BYTE STATEMENTS;*********************************CKSTOP =*       LDX #$03    ;RESET TO SCREEN       JSR CHKIN   ;INPUT FILE       JSR STOP    ;CHECK STOP       BNE OK2     ;IF NOT GO ON.       JMP BREAK   ;BREAK ERROR;*********************************; BEGIN READING BYTES FROM PRG;*********************************OK2 =*       LDX #$08    ;FILE #8       JSR CHKIN   ;INPUT FILE;*********************************; ZERO DATA COUNTER;*********************************DLOOP  LDA #$00       STA DATCNT;*********************************; LOOP;*********************************RLOOP  NOP       LDX #$08    ;FILE #8       JSR CHKIN   ;INPUT FILE;*********************************; READ IN BYTE DATA;*********************************; PUT DATA BYTE IN RECORD BUFFER; RETURNS CHARACTERS IN BYTCHR;*********************************       JSR CHRIN   ;DATA BYTE       STA CURBYT  ;STASH DATA BYTE       JSR READST   ;READ STATUS       STA DSKSTA   ;STASH DISK STATUS;*********************************; CHECK DATA BYTE COUNT IF ZERO; THEN PRINT .BYTE DIRECTIVE;*********************************       LDA DATCNT       BNE SUBBYT;*********************************; PRINT BYTE DIRECTIVE AND FIRST BYTE;*********************************; CHECK SCREEN OUTPUT OPTIONS; 0 = NO SCREEN; 1 = SCREEN OUTPUT;*********************************       LDA SCROPT       BNE PRTFI1;*********************************; SET OUTPUT CHANNEL TO SCREEN;*********************************       LDX #$03      ;FILE #Y       JSR CHKOUT    ;SET TO OUTPUT       JSR PRTDFB    ;PRINT DIRECTIVE;*********************************; SET OUTPUT CHANNEL TO ASM FILE;*********************************PRTFI1 LDX #$07      ;FILE #Y       JSR CHKOUT    ;SET TO OUTPUT       JSR PRTDFB    ;PRINT DIRECTIVE;*********************************; SET OUTPUT CHANNEL TO SCREEN;*********************************       LDX #$03      ;FILE #Y       JSR CHKOUT    ;SET TO OUTPUT       CLV       BVC CHKDSK;*********************************; SUBSEQUENT BYTES;*********************************SUBBYT=*;*********************************       ; CHECK SCREEN OUTPUT OPTIONS; 0 = NO SCREEN; 1 = SCREEN OUTPUT;*********************************       LDA SCROPT       BNE PRTFI2;*********************************; SET OUTPUT CHANNEL TO SCREEN;*********************************       LDX #$03      ;FILE #Y       JSR CHKOUT    ;SET TO OUTPUT       JSR PRTSB     ;PRINT FOOTER;*********************************; SET OUTPUT CHANNEL TO ASM FILE;*********************************PRTFI2 LDX #$07      ;FILE #Y       JSR CHKOUT    ;SET TO OUTPUT       JSR PRTSB     ;PRINT FOOTER;*********************************; SET OUTPUT CHANNEL TO SCREEN;*********************************       LDX #$03      ;FILE #Y       JSR CHKOUT    ;SET TO OUTPUT;*********************************; CHECK FOR DISK ERROR - LIKE END OF FILE;*********************************CHKDSK=*;      JSR READST   ;READ STATUS       LDA DSKSTA   ;CHECK DISK STATUS       BEQ CUROK    ;NEXT BYTE       BNE FOOT     ;DONE PRINT FOOTER;*********************************; INCREMENT RECORD COUNT;*********************************CUROK = *       LDX DATCNT       INX       STX DATCNT;*********************************; INCREMENT ADDRESS;*********************************       CLC       LDA CUADD       ADC #$01       STA CUADD       BCC IN1       LDA CUADD+1       ADC #$00       STA CUADD+1IN1=*;*********************************; CHECK FOR MAXIMUM $08 BYTES;*********************************       ;CPX #$08       CPX DATLIM       BEQ SRLOP       JMP RLOOP;*********************************; NEW LINE;*********************************;SRLOP  JSR PRTCR  ;PRINT CR       ;CLV       ;BVC DLOOP;*********************************; PRINT NEWLINE;*********************************; CHECK SCREEN OUTPUT OPTIONS; 0 = NO SCREEN; 1 = SCREEN OUTPUT;*********************************SRLOP  LDA SCROPT       BNE PRTFI4;*********************************; SET OUTPUT CHANNEL TO SCREEN;*********************************       LDX #$03      ;FILE #Y       JSR CHKOUT    ;SET TO OUTPUT       JSR PRTCR     ;PRINT CR;*********************************; SET OUTPUT CHANNEL TO ASM FILE;*********************************PRTFI4 LDX #$07      ;FILE #Y       JSR CHKOUT    ;SET TO OUTPUT       JSR PRTCR     ;PRINT CR;*********************************; SET OUTPUT CHANNEL TO SCREEN;*********************************       LDX #$03      ;FILE #Y       JSR CHKOUT    ;SET TO OUTPUT;*********************************; NEXT DIRECTIVE LINE;*********************************       JMP DLOOP;*********************************; PRINT FOOTER WITH END ADDRESS;*********************************FOOT=*;*********************************; INCREMENT ADDRESS BY 2;*********************************;      CLC;      LDA CUADD;      ADC #$02;      STA CUADD;      BCC IN2;      LDA CUADD+1;      ADC #$00;      STA CUADD+1;IN2=*;*********************************; LOAD CURRENT ADDRESS;*********************************       LDA CUADD       STA ADDLO    ;LOW ADDRESS       LDA CUADD+1       STA ADDHI    ;HIGH ADDRESS;*********************************; PRINT FOOTER WITH END ADDRESS;*********************************; CHECK SCREEN OUTPUT OPTIONS; 0 = NO SCREEN; 1 = SCREEN OUTPUT;*********************************       LDA SCROPT       BNE PRTFI3;*********************************; SET OUTPUT CHANNEL TO SCREEN;*********************************       LDX #$03      ;FILE #Y       JSR CHKOUT    ;SET TO OUTPUT       JSR PRTFTA    ;PRINT FOOTER;*********************************; SET OUTPUT CHANNEL TO ASM FILE;*********************************PRTFI3 LDX #$07      ;FILE #Y       JSR CHKOUT    ;SET TO OUTPUT       JSR PRTFTA    ;PRINT FOOTER;*********************************; SET OUTPUT CHANNEL TO SCREEN;*********************************       LDX #$03      ;FILE #Y       JSR CHKOUT    ;SET TO OUTPUT       JMP ENDFIL;*********************************; EXIT;*********************************; END OF PROGRAM FILE;*********************************;*********************************; BREAK MESSAGE - STOP KEY PRESSED;*********************************BREAK =* ;*********************************; RESET OUTPUT TO SCREEN;*********************************       LDX #$03      ;FILE #Y       JSR CHKOUT    ;SET TO OUTPUT;*********************************; PRINT BREAK MESSAGE;*********************************       LDX #MSG2-MSG1 ;BREAK ERROR       JSR PRINT       ;PRINT HEADING       JMP CLO1       ;CLOSE OUT;*********************************; END OF PROGRAM FILE;*********************************ENDFIL =*;*********************************; RESET OUTPUT TO SCREEN;*********************************       LDX #$03      ;FILE #3       JSR CHKOUT    ;SET TO OUTPUT;*********************************; PRINT END OF FILE MESSAGE;*********************************       LDX #MSG15-MSG1 ;OFFSET END OF FILE       JSR PRINT       ;PRINT HEADING;*********************************; DISK ERROR EXIT POINT;*********************************QUITER =*;*********************************; RESET OUTPUT TO SCREEN;*********************************       LDX #$03      ;FILE #Y       JSR CHKOUT    ;SET TO OUTPUT;*********************************; CLOSE OUT FILE AND RESET I/O;*********************************CLO1 =*       LDA #$03        ;FILE #7       JSR CLOSE       ;CLOSE       LDA #$07        ;FILE #7       JSR CLOSE       ;CLOSE       LDA #$08        ;FILE #7       JSR CLOSE       ;CLOSE       JSR CLRCHN      ;RESET I/O        RTS             ;BACK TO BASIC;#################################;*********************************; PRG TO BYTE UTILITIES;*********************************;#################################;*********************************; PRINT HEADER WITH PRG FILENAME;*********************************PRHEAD JSR PRTCML ;PRINT COMMENT LINE       JSR PRTSEM       JSR PRTSPA       LDA #<SUF  ;LOW BYTE MESSAGE       LDY #>SUF  ;HIGH BYTE MESSAGE       JSR STRPNT ;OUTPUT MESSAGE       JSR PRTCR  ;NEW LINE;*********************************; PRINT HEADER WITH START ADDRESS;*********************************       JSR PRTCML ;PRINT COMMENT LINE       JSR PRTORG ;PRINT ORG       JSR CVTADD ;CONVERT ADDRESS       JSR PRTADD ;PRINT ADDRESS       JSR PRTCR  ;NEW LINE       JSR PRTCML ;PRINT COMMENT LINE       RTS        ;RETURN;*********************************; PRINT BYTE DIRECTIVE AND FIRST BYTE;*********************************PRTDFB JSR PRTBYT ;PRINT ' .BYTE '       JSR PRTDOL ;PRINT '$'       LDA CURBYT ;RETERIVE BYTE       JSR CVTBYT ;CONVERT BYTE       JSR PRTBYE ;PRINT BYTE       RTS;*********************************; PRINT FOOTER WITH END ADDRESS;*********************************PRTFTA JSR PRTCR    ;NEW LINE       JSR PRTCML ;PRINT COMMENT LINE       JSR CVTADD ;CONVERT ADDRESS       JSR PRTXX  ;PRINT "XX"       JSR PRTADD ;PRINT ADDRESS       JSR PRTPC  ;PRINT "=*"       JSR PRTCR  ;NEW LINE       JSR PRTCML ;PRINT COMMENT LINE       RTS;*********************************; DISK STATUS;*********************************DSKSTA .BYTE $AADSKSTB .BYTE $AA;*********************************; SUBSEQUENT BYTES;*********************************PRTSB  JSR PRTCOM ;PRINT ','       JSR PRTDOL ;PRINT '$'       LDA CURBYT ;RETERIVE BYTE       JSR CVTBYT ;CONVERT BYTE       JSR PRTBYE ;PRINT BYTE       RTS;*********************************; CONVERT WORD ADDRESS INTO 4 PETASCII CHAR;*********************************ADDCHP .BYTE $AAADDCHR .BYTE $AA,$AA,$AA,$AA,$00;*********************************CVTADD =* LDA #$00 STA ADDCHP LDA ADDLO    ;LOW ADDRESS PHA          ;STACK IT LDA ADDHI ;GET HIGH BYTE JSR RIGHT    ;PRINT IT PLA          ;PULL LOW BYTE;RIGHT PHA     ;STACK BYTE LSR A        ;RIGHT JUSTIFY LSR A        ; BYTE IN LOW LSR A        ;  NIBBLE LSR A        ; JSR CHGASC   ;CONVERT BYTE TAX          ;STORE IN X PLA          ;PULL BYTE AND #$0F     ;MASK HIGH JSR CHGASC   ;CONVERT BYTE;*********************************; STORE 2 PETASCII CHARS OF ADDRESS NIBBLE;********************************* PHA          ;STACK RESULT TXA          ;GET HIGH NIBBLE  LDX ADDCHP STA ADDCHR,X INX PLA          ;GET LOW NIBBLE STA ADDCHR,X INX STX ADDCHP RTS;*********************************; PRINT ADDRESS;*********************************PRTADD LDX #$00       LDA ADDCHR,X       JSR CHROUT       INX       LDA ADDCHR,X       JSR CHROUT       INX       LDA ADDCHR,X       JSR CHROUT       INX       LDA ADDCHR,X       JMP CHROUT;*********************************; CONVERT BYTE INTO 2 PETASCII CHARS;*********************************BYTCHR .BYTE $AA,$AA,$00;*********************************CVTBYT PHA    ;STACK BYTE LSR A        ;RIGHT JUSTIFY LSR A        ; BYTE IN LOW LSR A        ;  NIBBLE LSR A        ; JSR CHGASC   ;CONVERT BYTE TAX          ;STORE IN X PLA          ;PULL BYTE AND #$0F     ;MASK HIGH JSR CHGASC   ;CONVERT BYTE;*********************************; STORE 2 PETASCII CHARS OF ADDRESS NIBBLE;********************************* PHA          ;STACK RESULT TXA          ;GET HIGH NIBBLE  STA BYTCHR INX PLA          ;GET LOW NIBBLE STA BYTCHR+1 RTS;*********************************; CONVERT BYTE TO ASCII CHAR;*********************************CHGASC CLC         ;CLEAR CARRY       ADC #$F6    ;ADD OFFSET       BCC NOSIX   ;IF C=0 OK       ADC #$06    ;ADD OFFSSETNOSIX  ADC #$3A    ;ADD OFFSET       RTS         ;RETURN;*********************************; PRINT BYTE;*********************************PRTBYE LDX #$00       LDA BYTCHR,X       JSR CHROUT       INX       LDA BYTCHR,X       JMP CHROUT;*********************************;  DISK ERROR CHECK;*********************************DISERR LDA #$08    ;DEV #8       STA FA      ;PUT IN DEV TABLE       JSR TALK    ;SEND TALK       LDA #$6F    ;SECONDARY ADDRESS       STA SA      ;PUT IN TABLE       JSR TALKSA  ;SEND SEC       JSR IECIN   ;GET FIRST BYTE       CMP #'0'    ;IS IT A ZERO       BNE DLOOC   ;IF NOT ZERO ERRORDLOOE  JSR IECIN   ;GET BYTE       CMP #$0D    ;IS IT CR?       BNE DLOOE   ;GET NEXT BYTE       JSR UNTALK  ;UNTALK       CLC         ;NO ERROR FLAG       RTS         ;RETURN;*********************************; PRINT DISK ERROR;*********************************DLOOC  PHA         ;STACK BYTE       JSR PRTCR   ;PRINT CR       PLA         ;GET BYTE       JSR CHROUT  ;PRINT ITDLOOA  JSR IECIN   ;GET NEXT BYTE       JSR CHROUT  ;PRINT IT       CMP #$0D    ;IS IT CR       BNE DLOOA   ;GET NEXT BYTE       JSR UNTALK  ;UNTALK       SEC         ;SET ERROR FLAG       RTS         ;RETURN;*********************************; STORAGE;*********************************NUMBYT .BYTE $AA   ;NUMBER BYTESCURBYT .BYTE $AA   ;CURRENT BYTE IN RECORDRECORD .WORD $AAAA ;RECORD NUMBERSTADD  .WORD $AAAA ;START ADDRESSCUADD  .WORD $AAAA ;CURRENT ADDRESSENADD  .WORD $AAAA ;END ADDRESSCOUNT  .BYTE $AA   ;COUNTERTEMP   .BYTE $AA   ;TEMPOARYSCROPT .BYTE $AA   ;SCREEN OUPUT OPTION;*********************************COUNT1 .BYTE $AA    ;COUNTER;*********************************; ERROR MESSAGES;*********************************MSG1 .BYTE $0D,$8DMSG2 .BYTE $0D.BYTE 'BREAK',$8DMSG6 .BYTE $0D.BYTE 'FILE ERRO',$D2;*********************************; MESSAGES;*********************************MSG7 .BYTE $0D,$0D,$0D.BYTE 'PRG2BYTE.C64 V072882'.BYTE $0D.BYTE '(C) 1982 BY COMMODORE BUSINESS '.BYTE 'MACHINES'.BYTE $A0MSG8 .BYTE $0D.BYTE 'SOURCE FILE NAME ?',$A0MSG9 .BYTE $0D.BYTE 'PRG NAME',$BAMSG10 .BYTE $0D.BYTE 'ASM NOT SAVED',$A0MSG11 .BYTE $0D.BYTE 'ADDRESS',$A0MSG12 .BYTE $0D.BYTE 'COUNT',$A0MSG13 .BYTE $0D.BYTE 'BYTE DATA',$8DMSG14 .BYTE $0D.BYTE 'CHECKSUM',$A0MSG15 .BYTE $0D.BYTE 'END OF FILE',$8DMSG16 .BYTE $0D.BYTE 'LAST RECORD',$8D;*********************************; HEX DIGITS;*********************************DIGIT1 .BYTE $AADIGIT2 .BYTE $AADIGIT3 .BYTE $AADIGIT4 .BYTE $AA;*********************************; FILENAME NAME BUFFER;*********************************OUF .BYTE $AA,$AA,$AA,$AA,$AA,$AA.BYTE $AA,$AA,$AA,$AA,$AA,$AA.BYTE $AA,$AA,$AA,$AA,$AA,$AA;*********************************; FILENAME NAME BUFFER;*********************************PUF .BYTE $AA,$AA,$AA,$AA,$AA,$AA.BYTE $AA,$AA,$AA,$AA,$AA,$AA.BYTE $AA,$AA,$AA,$AA,$AA,$AA;*********************************; FILENAME NAME BUFFER;*********************************SUF .BYTE $AA,$AA,$AA,$AA,$AA,$AA.BYTE $AA,$AA,$AA,$AA,$AA,$AA.BYTE $AA,$AA,$AA,$AA,$AA,$AASNUM .BYTE $00;*********************************; INIT DISK;*********************************INIT  .BYTE 'I0';*********************************SRCM  .BYTE ',S,W';*********************************PROGM .BYTE ',P,R';*********************************SAVO .BYTE $AASAVP .BYTE $AA;*********************************RECHI  .BYTE $AARECLO  .BYTE $AA;*********************************ADDHI  .BYTE $AAADDLO  .BYTE $AA;*********************************CURDAT .BYTE $AA;*********************************CHKSUM .WORD $AAAA;*********************************; PRINT "XX";*********************************PRTXX  LDA #'X'       JSR CHROUT       JMP CHROUT;*********************************; PRINT "=*";*********************************PRTPC  LDA #'='       JSR CHROUT       LDA #'*'       JMP CHROUT;*********************************; PRINT ' ';*********************************PRTSPA LDA #' '    ;ASCII CR       JMP CHROUT  ;PRINT IT;*********************************; PRINT ';';*********************************PRTSEM LDA #';'    ;ASCII CR       JMP CHROUT  ;PRINT IT;*********************************; PRINT '$';*********************************PRTDOL LDA #'$'    ;ASCII CR       JMP CHROUT  ;PRINT IT;*********************************; PRINT ',';*********************************PRTCOM LDA #','    ;ASCII CR       JMP CHROUT  ;PRINT IT;*********************************; PRINT SPACE;*********************************PRTSPC LDA #' '    ;ASCII CR       JMP CHROUT  ;PRINT IT;*********************************; PRINT '=$';*********************************MSST .BYTE ' *=$'     .BYTE 0;*********************************; PRINT ' *=$';*********************************PRTORG LDA #<MSST  ;LOW BYTE MESSAGE       LDY #>MSST  ;HIGH BYTE MESSAGE       JMP STRPNT  ;OUTPUT MESSAGE;*********************************; PRINT ' .BYTE ';*********************************MSBY .BYTE ' .BYTE '     .BYTE 0;*********************************; PRINT " .BYTE ";*********************************PRTBYT LDA #<MSBY  ;LOW BYTE MESSAGE       LDY #>MSBY  ;HIGH BYTE MESSAGE       JMP STRPNT  ;OUTPUT MESSAGE;*********************************; PRINT COMMENT LINE;*********************************MSCL .BYTE ';*********************************'     .BYTE $0D     .BYTE 0;*********************************; SYMBOLIC DISASSEMBLY OPTION;*********************************PRTCML LDA #<MSCL  ;LOW BYTE MESSAGE       LDY #>MSCL  ;HIGH BYTE MESSAGE       JMP STRPNT  ;OUTPUT MESSAGE;*********************************; SCREEN OUTPUT OPTION;*********************************MSS1 .BYTE $0D .BYTE 'OUTPUT TO SCREEN (Y OR N/CR)? ' .BYTE 0;*********************************; OUTPUT STRING ROUTINE;*********************************PRINT  STX COUNT   ;PUT X IN COUNTPLOOP  LDX COUNT   ;LOAD X FROM COUNT       LDA MSG1,X  ;LOAD CHAR       PHP         ;SAVE STATUS FLAG       AND #$7F    ;MASK BIT 8       JSR CHROUT  ;PRINT CHAR       INC COUNT   ;INC OFFSET       PLP         ;GET STATUS FLAG       BPL PLOOP   ;IF BIT 8 ZERO       RTS         ;RETURN;*********************************; OUTPUT UTILITIES;*********************************; STRING OUTPUT ROUTINE;*********************************STRPNT STA ZEROUR     ;POINTER TO       STY ZEROUR+1   ;MESSAGE       LDY #$00       ;OFFSETSOUT   LDA (ZEROUR),Y ;GET CHAR       BEQ SEXIT      ;IF ZERO EXIT       JSR CHROUT     ;PRINT       INY            ;INC OFFSET       BNE SOUT       ;LOOPSEXIT  RTS            ;RETURN;*********************************; INPUT UTILITIES;*********************************; GET OPTION (CR/Y OR N): Y=C=0;*********************************CRYS JSR CHRIN CMP #'Y' BEQ CRYS1 CMP #$0D BEQ CRYS1 BNE CRNO1;*********************************; GET OPTION (Y OR CR/N): Y=C=0;*********************************CRNO JSR CHRIN CMP #'N' BEQ CRNO1 CMP #$0D BEQ CRNO1CRYS1 CLC RTSCRNO1 SEC RTS;*********************************; INPUT STRING ROUTINE;*********************************INSTNO LDY #$00INSTN1 JSR CHRIN       STA OUF,Y       INY       CMP #$0D       BNE INSTN1       DEY       RTS;*********************************; INPUT STRING ROUTINE;*********************************INSTNP LDY #$00INSTN2 JSR CHRIN       STA PUF,Y       STA SUF,Y       INY       CMP #$0D       BNE INSTN2       DEY       STY SNUM       RTS;*********************************; COPY PRG FILENAME;*********************************CNSTNP TYA       TAX       LDA #$00       STA SUF,X       DEXCNSTN1 LDA PUF,X       STA SUF,X       DEX       BPL CNSTN1       BEQ CNSTN1       RTS;*********************************; OUTPUT CARRAIGE RETURN;*********************************PRTCR  LDA #$0D    ;ASCII CR       JMP CHROUT  ;PRINT IT;*********************************; DIDRECTIVE DATA ELEMENT COUNT;*********************************DATCNT .BYTE $AA;*********************************; DIDRECTIVE DATA ELEMENT COUNT;*********************************DATLIM .BYTE $AA;*********************************; CURRENT RECORD HOLDING BUFFER;*********************************RECCNT .WORD $AAAARECPNT .BYTE $AARECBUF =*       .BYTE $AA,$AA,$AA,$AA,$AA,$AA       .BYTE $AA,$AA,$AA,$AA,$AA,$AA       .BYTE $AA,$AA,$AA,$AA,$AA,$AA       .BYTE $AA,$AA,$AA,$AA,$AA,$AA       .BYTE $AA,$AA,$AA,$AA,$AA,$AA       .BYTE $AA,$AA,$AA,$AA,$AA,$AA       .BYTE $AA,$AA,$AA,$AA,$AA,$AA       .BYTE $AA,$AA,$AA,$AA,$AA,$AA       .BYTE $AA,$AA,$AA,$AA,$AA,$AA       .BYTE $AA,$AA,$AA,$AA,$AA,$AA       .BYTE $AA,$AA,$AA,$AA,$AA,$AA       .BYTE $AA,$AA,$AA,$AA,$AA,$AA       .BYTE $AA,$AA,$AA,$AA,$AA,$AA       .BYTE $AA,$AA,$AA,$AA,$AA,$AA       .BYTE $AA,$AA,$AA,$AA,$AA,$AA       .BYTE $AA,$AA,$AA,$AA,$AA,$AA;*********************************; DIRECTIVE OPTION;*********************************DIROPT .BYTE $00;*********************************; DIRECTIVE OPTION;*********************************IDIROP=* LDA #<MSDO ;DIRECTIVE TYPE LDY #>MSDO JSR STRPNTAOP3 JSR GETIN BEQ AOP3 CMP #'0' BEQ ASC CMP #'1' BEQ ASC CMP #'2' BEQ ASC BNE AOP3ASC JSR CHROUT STA DIROPT RTS;*********************************; DIRECTIVE OPTION;*********************************MSDO .BYTE $0D,$0D .BYTE 'DIRECTIVE OPTIONS' .BYTE $0D,$0D .BYTE '0 BYTE',$0D .BYTE '1 WORD',$0D .BYTE '2 DBYTE',$0D .BYTE 'ENTER DIRECTIVE CODE: ' .BYTE 0;*********************************;;*********************************;*********************************; NUMBER OF DATA ENTRIES IN DIRECTIVE LINE;*********************************NOTABS LDA #<MSA1 ;NUMBER OF DATA LDY #>MSA1 JSR STRPNT JSR GETCNT   ;INPUT HEX BYTE LDA DATLIM BEQ SETMIN ; IF ZERO SET DEFAULT; IF THE C FLAG IS 0, THEN A (UNSIGNED) < NUM (UNSIGNED) AND BCC WILL BRANCH CMP #$11 BCS SETMAX RTS;*********************************;;*********************************SETDEF LDA #$08 STA DATLIM RTS SETMAX LDA #$10 STA DATLIM RTS SETMIN LDA #$01 STA DATLIM RTS ;*********************************; INPUT HEX CHAR STRING;*********************************GETCNT LDA #$08 STA DATLIM JSR INSTNG DEY BMI INEND;*********************************; PROCESS INPUT;********************************* JSR GETBYT LDA TEMP STA DATLIMINEND RTS;*********************************;;*********************************;*********************************; COVERT BUFFER INTO BYTES;*********************************GETBYT LDA BUF,Y JSR BINARY STA TEMP DEY BMI INENX LDA BUF,Y JSR BINARY ASL A ASL A ASL A ASL A ORA TEMP STA TEMPINENX RTS;*********************************; CONVERT A INTO HEX NIBBLE;*********************************BINARY SEC SBC #'0' BCC NOHEX CMP #$0A BCC YSHEX SBC #$07 CMP #$10 BCS NOHEX CMP #$0A BCS YSHEXNOHEX SEC RTSYSHEX CLC RTS;*********************************; GENERAL INPUT BUFFER;*********************************BUF .BYTE $AA,$AA,$AA,$AA,$AA,$AA.BYTE $AA,$AA,$AA,$AA,$AA,$AA.BYTE $AA,$AA,$AA,$AA,$AA,$AA;*********************************; INPUT STRING ROUTINE;*********************************INSTNG LDY #$00INSTN3 JSR CHRIN STA BUF,Y INY CMP #$0D BNE INSTN3 DEY RTS;*********************************; NUMBER OF DATA ENTRIES IN DIRECTIVE LINE;*********************************MSA1 .BYTE $0D.BYTE 'NUMBER OF ENTRIES PER DIRECTIVE'.BYTE $0D.BYTE 'IN HEX MIN $01 / MAX $10'.BYTE $0D.BYTE 'DEFAULT $08'.BYTE $0D.BYTE '($01-$10 OR $08/CR) :$'.BYTE 0;*********************************;;*********************************.LIB DOWORD.ASM;*********************************;;*********************************.LIB DODBY.ASM;*********************************;;*********************************.END