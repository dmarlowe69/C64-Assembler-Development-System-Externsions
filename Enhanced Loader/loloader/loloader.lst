
; 64tass Turbo Assembler Macro V1.53.1515 listing file
; 64tass -L loloader.lst -o loloader.prg loloader.asm
; Tue Apr 24 00:42:36 2018

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: loloader.asm

=1					BSTUB = 1
>0801	0d 08				 .WORD BASIC    ;LINE LINK POINTER
>0803	0a 00				 .BYTE $0A,$00  ;LINE NUMBER (10)
>0805	9e				 .BYTE 158      ;SYS COMMAND TOKEN
>0806	28 32 30 36 33 29		 .TEXT '(2063)' ;CALL TO $080F
>080c	00				 .BYTE $00      ;END OF LINE
.080d					BASIC
>080d	00 00				 .BYTE $00,$00  ;END OF BASIC
=$4c					TITLE1=$4C ;'L'
=$4f					TITLE2=$4F ;'O'
=$ff90					SETMSG=$FF90
.080f	a9 c0		lda #$c0	 LDA #$C0     ;ALLOW ALL MSG
.0811	20 90 ff	jsr $ff90	 JSR SETMSG

;******  Processing file: loader.asm

=$90					STATUS=$90    ;STATUS BYTE
=$fb					ZEROPG=$FB    ;ZERO PAGE POINTER
=$fd					ZEROUR=$FD    ;ZERO PAGE POINTER
=$e391					BASWST  =$E391  ;BASIC WARM START
=$ffe1					STOP  =$FFE1  ;CHECK FOR STOP
=$ffba					SETLFS=$FFBA  ;SET LOGICAL FILE
=$ffbd					SETNAM=$FFBD  ;SET FILENAME
=$ffc0					OPEN  =$FFC0  ;OPEN FILE
=$ffc3					CLOSE =$FFC3  ;CLOSE LOGICAL FILE
=$ffc6					CHKIN =$FFC6  ;OPEN INPUT CHANNEL
=$ffcc					CLRCHN=$FFCC  ;RESET I/O CHANNELS
=$ffcf					CHRIN =$FFCF  ;GET KEYBOARD INPUT
=$ffd2					CHROUT=$FFD2  ;OUTPUT CHARACTER
=$ffd5					LOAD  =$FFD5
=$ffd8					SAVE  =$FFD8
=$ffe4					GETIN =$FFE4
=$ffb7					READST=$FFB7
=$37					MEMSIZ=$37   ;TOP OF FREE RAM+1
.0814	20 cc ff	jsr $ffcc	LOADER JSR CLRCHN  ;RSET I/O
.0817	a9 00		lda #$00	 LDA #$00        ;ZERO BYTE
.0819	8d 7b 0a	sta $0a7b	 STA RECORD      ;RECORD COUNT
.081c	8d 7c 0a	sta $0a7c	 STA RECORD+1    ;
.081f	8d 78 0a	sta $0a78	 STA OFFSET      ;LOAD OFFSET
.0822	8d 79 0a	sta $0a79	 STA OFFSET+1    ;
.0825	85 90		sta $90		 STA STATUS      ;I/O STATUS
.0827	a2 4b		ldx #$4b	 LDX #MSG7-MSG1  ;OFFSET FOR TITLE
.0829	20 d5 09	jsr $09d5	 JSR PRINT       ;PRINT TITLE
.082c	90 e6		bcc $0814	 BCC LOADER      ;IF ERROR RESET
.082e	a9 00		lda #$00	 LDA #$00        ;ERROR CODE
.0830	8d 50 0b	sta $0b50	 STA ECODE       ;SET ERROR
.0833	8d 4f 0b	sta $0b4f	 STA SAFG        ;CLEAR START ADDRESS FLAG
.0836	a2 8a		ldx #$8a	 LDX #MSG8-MSG1  ;FILE NAME
.0838	20 d5 09	jsr $09d5	 JSR PRINT       ;PRINT IT
.083b	a2 28		ldx #$28	 LDX #$28        ;CHAR COUNT
.083d	8e 7d 0a	stx $0a7d	 STX COUNT       ;STORE IN COUNT
.0840	ce 7d 0a	dec $0a7d	SPACE DEC COUNT  ;DEC COUNT
.0843	f0 cf		beq $0814	 BEQ LOADER      ;IF ZERO RESET
.0845	20 cf ff	jsr $ffcf	 JSR CHRIN       ;GET CHAR
.0848	c9 20		cmp #$20	 CMP #' '        ;IS IT A SPACE
.084a	f0 f4		beq $0840	 BEQ SPACE       ;IF SO LOOP
.084c	c9 0d		cmp #$0d	 CMP #$0D        ;IS FIRST CR?
.084e	d0 08		bne $0858	 BNE NAME        ;IF NOT BRANCH
.0850	a9 45		lda #$45	 LDA #'E'        ;ERROR CODE
.0852	8d 50 0b	sta $0b50	 STA ECODE       ;SET ERROR
.0855	4c 9a 09	jmp $099a	 JMP QUIT        ;QUIT LOADER
.0858	a2 00		ldx #$00	NAME LDX #$00    ;ZERO BYTE
.085a	8e 91 0a	stx $0a91	 STX COUNT1      ;CHAR COUNT
.085d	f0 07		beq $0866	 BEQ CRLFD        ;BRANCH ALWAYS
.085f	20 cf ff	jsr $ffcf	GETC  JSR CHRIN  ;GET NEXT CHAR
.0862	c9 20		cmp #$20	 CMP #' '        ;IS IT A SPACE?
.0864	f0 15		beq $087b	 BEQ DNAME       ;NONE ALLOWED
.0866	c9 0d		cmp #$0d	CRLFD CMP #$0D    ;IS IT CR?
.0868	f0 11		beq $087b	 BEQ DNAME       ;END OF NAME
.086a	ae 91 0a	ldx $0a91	 LDX COUNT1      ;GET CHAR COUNT
.086d	e0 0f		cpx #$0f	 CPX #$0F        ;15 CHARS?
.086f	f0 a3		beq $0814	 BEQ LOADER      ;RESTART LOADER
.0871	9d 7f 0a	sta $0a7f,x	 STA BUF,X       ;STORE CHAR
.0874	e8		inx		 INX             ;INC OFFSET
.0875	8e 91 0a	stx $0a91	 STX COUNT1      ;CHAR COUNT
.0878	4c 5f 08	jmp $085f	 JMP GETC        ;GET NEXT CHAR
.087b	a9 2c		lda #$2c	DNAME LDA #',' ;ASCII ","
.087d	9d 7f 0a	sta $0a7f,x	 STA BUF,X     ;PUT IN BUFFER
.0880	e8		inx		 INX           ;INC OFFSET
.0881	a9 53		lda #$53	 LDA #'S'      ;FOR SEQ FILE
.0883	9d 7f 0a	sta $0a7f,x	 STA BUF,X     ;PUT IN BUFFER
.0886	e8		inx		 INX           ;INC OFFSET
.0887	8e 91 0a	stx $0a91	 STX COUNT1    ;SAVE NUMBER CHARS
.088a	a9 0d		lda #$0d	 LDA #$0D      ;ASCII CR
.088c	20 d2 ff	jsr $ffd2	 JSR CHROUT    ;PRINT IT
.088f	a9 07		lda #$07	 LDA #$07    ;FILE #7
.0891	a2 08		ldx #$08	 LDX #$08    ;DEVICE #8
.0893	a0 0f		ldy #$0f	 LDY #$0F    ;SEC ADR #15
.0895	20 ba ff	jsr $ffba	 JSR SETLFS  ;SET FILE PARA
.0898	a2 74		ldx #$74	 LDX #<INIT  ;LOW FILENAME
.089a	a0 0a		ldy #$0a	 LDY #>INIT  ;HIGH FILENAME
.089c	a9 02		lda #$02	 LDA #$02    ;LENGTH OF NAME
.089e	20 bd ff	jsr $ffbd	 JSR SETNAM  ;SET FILENAME
.08a1	20 c0 ff	jsr $ffc0	 JSR OPEN    ;OPEN FILE
.08a4	a5 90		lda $90		 LDA STATUS  ;GET STATUS
.08a6	f0 04		beq $08ac	 BEQ OK      ;ZERO IF OK
.08a8	c9 40		cmp #$40	 CMP #$40    ;IS IT 64?
.08aa	d0 23		bne $08cf	 BNE ERROR1  ;ERROR
.08ac	a9 07		lda #$07	OK LDA #$07  ;FILE #7
.08ae	20 c3 ff	jsr $ffc3	 JSR CLOSE   ;CLOSE FILE
.08b1	a9 07		lda #$07	 LDA #$07    ;FILE #7
.08b3	a2 08		ldx #$08	 LDX #$08    ;DEVICE #8
.08b5	a0 07		ldy #$07	 LDY #$07    ;SECOND ADDRESS
.08b7	20 ba ff	jsr $ffba	 JSR SETLFS  ;SET FILE
.08ba	a2 7f		ldx #$7f	 LDX #<BUF   ;LOW FILENAME
.08bc	a0 0a		ldy #$0a	 LDY #>BUF   ;HIGH FILENAME
.08be	ad 91 0a	lda $0a91	 LDA COUNT1  ;GET LENGTH
.08c1	20 bd ff	jsr $ffbd	 JSR SETNAM  ;SET FILENAME
.08c4	20 c0 ff	jsr $ffc0	 JSR OPEN        ;OPEN FILE
.08c7	a5 90		lda $90		 LDA STATUS      ;CHECK STATUS
.08c9	f0 07		beq $08d2	 BEQ OK3         ;IF ZERO OK
.08cb	c9 40		cmp #$40	 CMP #$40        ;END OF FILE?
.08cd	f0 03		beq $08d2	 BEQ OK3         ;IF SO OK
.08cf	4c 84 09	jmp $0984	ERROR1 JMP ERROR ;FILE ERROR
.08d2	a2 07		ldx #$07	OK3 LDX #$07     ;FILE #7
.08d4	20 c6 ff	jsr $ffc6	 JSR CHKIN       ;INPUT FILE
.08d7	20 e1 ff	jsr $ffe1	CKSTOP JSR STOP  ;CHECK STOP
.08da	d0 03		bne $08df	 BNE OK2         ;IF NOT GO ON.
.08dc	4c 92 09	jmp $0992	 JMP BREAK       ;BREAK ERROR
.08df	20 f6 09	jsr $09f6	OK2  JSR INPUT   ;GET BYTE
.08e2	c9 3b		cmp #$3b	 CMP #';'        ;START OF RECORD
.08e4	d0 f1		bne $08d7	 BNE CKSTOP      ;IF NOT TRY AGAIN
.08e6	a9 00		lda #$00	 LDA #$00        ;ZERO BYTE
.08e8	8d 76 0a	sta $0a76	 STA USER        ;ZERO CHECK LOW
.08eb	8d 77 0a	sta $0a77	 STA USER+1      ;ZERO CHECK HIGH
.08ee	8d 7d 0a	sta $0a7d	 STA COUNT       ;ZERO BYTE COUNT
.08f1	20 19 0a	jsr $0a19	 JSR GETBYT      ;GET BYTE
.08f4	d0 19		bne $090f	 BNE RECGOD      ;<>0 NOT LAST
.08f6	20 19 0a	jsr $0a19	 JSR GETBYT      ;GET RECORD COUNT
.08f9	cd 7c 0a	cmp $0a7c	 CMP RECORD+1    ;SAME AS REC HIGH
.08fc	f0 03		beq $0901	 BEQ NEXCT       ;IF EQUAL NEXT
.08fe	4c 95 09	jmp $0995	 JMP RECERR      ;BAD REC COUNT
.0901	20 19 0a	jsr $0a19	NEXCT JSR GETBYT ;GET RECORD COUNT
.0904	cd 7b 0a	cmp $0a7b	 CMP RECORD      ;SAME AS REC LOW
.0907	d0 03		bne $090c	 BNE RECER      ;BAD REC COUNT
.0909	4c 9a 09	jmp $099a	 JMP QUIT        ;ALL LOADED
.090c	4c 95 09	jmp $0995	RECER JMP RECERR ;
.090f	8d 7a 0a	sta $0a7a	RECGOD STA NUMBYT ;STORE NUM BYTES
.0912	ee 7b 0a	inc $0a7b	 INC RECORD       ;INC REC COUNT
.0915	d0 03		bne $091a	 BNE SKPIN1       ;ZERO?
.0917	ee 7c 0a	inc $0a7c	 INC RECORD+1     ;IF SO INC HIGH
.091a	20 0c 0a	jsr $0a0c	SKPIN1 JSR SUMBYT ;SUM BYTES
.091d	20 19 0a	jsr $0a19	 JSR GETBYT       ;GET HIH ADDRESS
.0920	85 fc		sta $fc		 STA ZEROPG+1     ;STORE IN POINT
.0922	20 0c 0a	jsr $0a0c	 JSR SUMBYT       ;SUM BYTES
.0925	20 19 0a	jsr $0a19	 JSR GETBYT       ;GET LOW ADDRESS
.0928	85 fb		sta $fb		 STA ZEROPG       ;STORE IN POINT
=$092a					SKPINC =*
.092a	20 0c 0a	jsr $0a0c	 JSR SUMBYT       ;SUM BYTES
.092d	ad 7b 0a	lda $0a7b	 LDA RECORD       ;GET REC COUNT
.0930	c9 01		cmp #$01	 CMP #$01         ;FIRST ONE
.0932	d0 1e		bne $0952	 BNE MORBYT       ;IF NOT GO ON
.0934	a9 0d		lda #$0d	 LDA #$0D         ;ASCII CR
.0936	20 d2 ff	jsr $ffd2	 JSR CHROUT       ;PRINT IT
.0939	20 43 0a	jsr $0a43	 JSR PRTADD       ;PRINT ADDRESS
.093c	ad 4f 0b	lda $0b4f	 LDA SAFG     ;CHECK START ADDRESS FLAG
.093f	d0 11		bne $0952	 BNE MORBYT   ;IF SET SKIP NEXT
.0941	a9 01		lda #$01	 LDA #$01
.0943	8d 4f 0b	sta $0b4f	 STA SAFG
.0946	ad 49 0b	lda $0b49	 LDA SAV
.0949	8d 4b 0b	sta $0b4b	 STA SA
.094c	ad 4a 0b	lda $0b4a	 LDA SAV+1
.094f	8d 4c 0b	sta $0b4c	 STA SA+1
.0952	20 19 0a	jsr $0a19	MORBYT JSR GETBYT ;GET DATA BYTE
.0955	ac 7d 0a	ldy $0a7d	 LDY COUNT        ;GET BYTE COUNT
.0958	8c 91 0a	sty $0a91	 STY COUNT1       ;SAVE COUNT
.095b	ee 7d 0a	inc $0a7d	 INC COUNT        ;INC COUNT
.095e	91 fb		sta ($fb),y	 STA (ZEROPG),Y   ;STORE DATA
.0960	d1 fb		cmp ($fb),y	 CMP (ZEROPG),Y   ;CHECK DATA
.0962	d0 28		bne $098c	 BNE NONRAM       ;IF <> ERROR
.0964	20 0c 0a	jsr $0a0c	 JSR SUMBYT       ;SUM BYTES
.0967	ce 7a 0a	dec $0a7a	 DEC NUMBYT       ;DEC BYTE COUNT
.096a	d0 e6		bne $0952	 BNE MORBYT       ;IF <>0 MORE
.096c	20 19 0a	jsr $0a19	 JSR GETBYT       ;GET HIH CHECK
.096f	cd 77 0a	cmp $0a77	 CMP USER+1       ;COMPARE, SAME?
.0972	d0 1b		bne $098f	 BNE CHKERR       ;IF NOT ERROR
.0974	20 19 0a	jsr $0a19	 JSR GETBYT       ;GET LOW CHECK
.0977	cd 76 0a	cmp $0a76	 CMP USER         ;COMPARE, SAME?
.097a	d0 13		bne $098f	 BNE CHKERR       ;IF NOT ERROR
.097c	a9 2e		lda #$2e	 LDA #'.'         ;ASCII PERIOD
.097e	20 d2 ff	jsr $ffd2	 JSR CHROUT       ;PRINT IT
.0981	4c d7 08	jmp $08d7	 JMP CKSTOP       ;NEXT RECORD
=$0984					ERROR =*
.0984	a9 45		lda #$45	 LDA #'E'
.0986	8d 50 0b	sta $0b50	 STA ECODE
.0989	a2 40		ldx #$40	 LDX #MSG6-MSG1  ;FILE ERROR
>098b	2c				.BYTE $2C
.098c	a2 24		ldx #$24	NONRAM LDX #MSG4-MSG1 ;NON-RAM LOAD
>098e	2c				.BYTE $2C
.098f	a2 31		ldx #$31	CHKERR LDX #MSG5-MSG1 ;CHECKSUM ERROR
>0991	2c				.BYTE $2C
.0992	a2 11		ldx #$11	BREAK LDX #MSG2-MSG1 ;BREAK ERROR
>0994	2c				.BYTE $2C
.0995	a2 00		ldx #$00	RECERR LDX #$00 ;BAD RECORD COUNT
.0997	20 d5 09	jsr $09d5	 JSR PRINT      ;PRINT MESSAGE
.099a	20 cc ff	jsr $ffcc	QUIT JSR CLRCHN ;RESET I/O
.099d	a9 07		lda #$07	 LDA #$07       ;FILE #7
.099f	20 c3 ff	jsr $ffc3	 JSR CLOSE      ;CLOSE
.09a2	ad 50 0b	lda $0b50	 LDA ECODE
.09a5	c9 45		cmp #$45	 CMP #'E'
.09a7	d0 01		bne $09aa	 BNE PADR
.09a9	60		rts		 RTS           ;BACK TO BASIC
=$09aa					PADR =*
.09aa	18		clc		 CLC            ;CLEAR CARRY
.09ab	ad 91 0a	lda $0a91	 LDA COUNT1     ;GET LAST OFFSET
.09ae	65 fb		adc $fb		 ADC ZEROPG     ;ADD TO LAST REC
.09b0	85 fb		sta $fb		 STA ZEROPG     ;LOAD ADDRESS
.09b2	a5 fc		lda $fc		 LDA ZEROPG+1   ;
.09b4	69 00		adc #$00	 ADC #$00       ;
.09b6	85 fc		sta $fc		 STA ZEROPG+1   ;
.09b8	a9 0d		lda #$0d	 LDA #$0D       ;ASCII CR
.09ba	20 d2 ff	jsr $ffd2	 JSR CHROUT     ;PRINT IT
.09bd	20 43 0a	jsr $0a43	 JSR PRTADD     ;PRINT ADDRESS
.09c0	ad 49 0b	lda $0b49	 LDA SAV
.09c3	8d 4d 0b	sta $0b4d	 STA EA
.09c6	ad 4a 0b	lda $0b4a	 LDA SAV+1
.09c9	8d 4e 0b	sta $0b4e	 STA EA+1
.09cc	a2 18		ldx #$18	 LDX #MSG3-MSG1 ;END OF LOAD
.09ce	20 d5 09	jsr $09d5	 JSR PRINT      ;PRINT IT
.09d1	20 51 0b	jsr $0b51	 JSR SAVOBJ
.09d4	60		rts		 RTS       ;BACK TO BASIC
.09d5	8e 7d 0a	stx $0a7d	PRINT STX COUNT ;PUT X IN COUNT
.09d8	ae 7d 0a	ldx $0a7d	PLOOP LDX COUNT ;LOAD X FROM COUNT
.09db	bd 92 0a	lda $0a92,x	 LDA MSG1,X     ;LOAD CHAR
.09de	08		php		 PHP            ;SAVE STATUS FLAG
.09df	29 7f		and #$7f	 AND #$7F       ;MASK BIT 8
.09e1	20 d2 ff	jsr $ffd2	 JSR CHROUT     ;PRINT CHAR
.09e4	ee 7d 0a	inc $0a7d	 INC COUNT      ;INC OFFSET
.09e7	28		plp		 PLP            ;GET STATUS FLAG
.09e8	10 ee		bpl $09d8	 BPL PLOOP      ;IF BIT 8 ZERO
.09ea	60		rts		 RTS            ;RETURN
.09eb	c9 3a		cmp #$3a	BYTASC CMP #$3A ;IS CHAR >9
.09ed	08		php		 PHP            ;PUSH P
.09ee	29 0f		and #$0f	 AND #$0F       ;MASK HIGH BYTE
.09f0	28		plp		 PLP            ;PULL P
.09f1	90 02		bcc $09f5	 BCC EXIT1      ;IF <=9 OK
.09f3	69 08		adc #$08	 ADC #$08       ;ADD OFFSET
.09f5	60		rts		EXIT1 RTS       ;RETURN
.09f6	20 cf ff	jsr $ffcf	INPUT JSR CHRIN ;INPUT CHAR
.09f9	48		pha		 PHA            ;STORE
.09fa	a5 90		lda $90		 LDA STATUS     ;GET STATUS BYTE
.09fc	f0 04		beq $0a02	 BEQ JUMP       ;IF ZERO OK
.09fe	c9 40		cmp #$40	 CMP #$40       ;END OF FILE?
.0a00	d0 02		bne $0a04	 BNE DISKER     ;IF NOT ERROR
.0a02	68		pla		JUMP PLA        ;GET CHAR
.0a03	60		rts		 RTS            ;RETURN
.0a04	68		pla		DISKER PLA      ;PULL INPUT CHAR
.0a05	68		pla		 PLA            ;PULL RETURN
.0a06	68		pla		 PLA            ;
.0a07	68		pla		 PLA            ;PULL RETURN
.0a08	68		pla		 PLA            ;
.0a09	4c 84 09	jmp $0984	 JMP ERROR      ;GOTO ERROR HANDLE
.0a0c	18		clc		SUMBYT CLC      ;CLEAR CARRY
.0a0d	6d 76 0a	adc $0a76	 ADC USER       ;ADD BYTE OF CHECK
.0a10	8d 76 0a	sta $0a76	 STA USER       ;REPLACE BYTE
.0a13	90 03		bcc $0a18	 BCC EXIT       ;IF NO CARRY OK
.0a15	ee 77 0a	inc $0a77	 INC USER+1     ;INC HIGH BYTE
.0a18	60		rts		EXIT RTS        ;RETURN
.0a19	a9 00		lda #$00	GETBYT LDA #$00  ;ZERO BYTE
.0a1b	8d 7e 0a	sta $0a7e	 STA TEMP        ;STORE IN TEMP
.0a1e	20 f6 09	jsr $09f6	 JSR INPUT       ;GET CHAR INPUT
.0a21	c9 20		cmp #$20	CHCKSP CMP #' '  ;IS IT A SPACE?
.0a23	d0 09		bne $0a2e	 BNE CREBYT      ;IF NOT CREATE
.0a25	20 f6 09	jsr $09f6	 JSR INPUT       ;GET CHAR INPUT
.0a28	c9 20		cmp #$20	 CMP #' '        ;IS IT S SPACE?
.0a2a	d0 0f		bne $0a3b	 BNE NEXBYT      ;IF NOT GO ON
.0a2c	18		clc		 CLC             ;FLAG ERROR
.0a2d	60		rts		 RTS             ;RETURN
.0a2e	20 eb 09	jsr $09eb	CREBYT JSR BYTASC ;GET HIGH NIBBLE
.0a31	0a		asl a		 ASL A            ;LEFT JUSTIFY
.0a32	0a		asl a		 ASL A            ; ASCII CHAR
.0a33	0a		asl a		 ASL A            ;  IN HIGH
.0a34	0a		asl a		 ASL A            ;   NIBBLE
.0a35	8d 7e 0a	sta $0a7e	 STA TEMP         ;STORE
.0a38	20 f6 09	jsr $09f6	 JSR INPUT        ;GET INPUT
.0a3b	20 eb 09	jsr $09eb	NEXBYT JSR BYTASC ;CREATE LOW NIB
.0a3e	0d 7e 0a	ora $0a7e	 ORA TEMP         ;PUT IN PLACE
.0a41	38		sec		 SEC              ;FLAG OK
.0a42	60		rts		 RTS              ;RETURN
.0a43	a5 fb		lda $fb		PRTADD LDA ZEROPG ;LOW ADDRESS
.0a45	8d 49 0b	sta $0b49	 STA SAV      ;SAVE HIGH BYTE START ADDRESS
.0a48	48		pha		 PHA          ;STACK IT
.0a49	a5 fc		lda $fc		 LDA ZEROPG+1 ;GET HIGH BYTE
.0a4b	8d 4a 0b	sta $0b4a	 STA SAV+1    ;SAVE LOW BYTE START ADDRESS
.0a4e	20 52 0a	jsr $0a52	 JSR RIGHT    ;PRINT IT
.0a51	68		pla		 PLA          ;PULL LOW BYTE
.0a52	48		pha		RIGHT PHA     ;STACK BYTE
.0a53	4a		lsr a		 LSR A        ;RIGHT JUSTIFY
.0a54	4a		lsr a		 LSR A        ; BYTE IN LOW
.0a55	4a		lsr a		 LSR A        ;  NIBBLE
.0a56	4a		lsr a		 LSR A        ;
.0a57	20 6a 0a	jsr $0a6a	 JSR CHGASC   ;CONVERT BYTE
.0a5a	aa		tax		 TAX          ;STORE IN X
.0a5b	68		pla		 PLA          ;PULL BYTE
.0a5c	29 0f		and #$0f	 AND #$0F     ;MASK HIGH
.0a5e	20 6a 0a	jsr $0a6a	 JSR CHGASC   ;CONVERT BYTE
.0a61	48		pha		 PHA          ;STACK RESULT
.0a62	8a		txa		 TXA          ;GET HIGH NIBBLE
.0a63	20 d2 ff	jsr $ffd2	 JSR CHROUT   ;PRINT IT
.0a66	68		pla		 PLA          ;GET LOW NIBBLE
.0a67	4c d2 ff	jmp $ffd2	 JMP CHROUT   ;PRINT AND RETURN
.0a6a	18		clc		CHGASC CLC      ;CLEAR CARRY
.0a6b	69 f6		adc #$f6	 ADC #$F6       ;ADD OFFSET
.0a6d	90 02		bcc $0a71	 BCC NOSIX      ;IF C=0 OK
.0a6f	69 06		adc #$06	 ADC #$06       ;ADD OFFSSET
.0a71	69 3a		adc #$3a	NOSIX ADC #$3A  ;ADD OFFSET
.0a73	60		rts		 RTS            ;RETURN
>0a74	49 30				INIT  .TEXT 'I0'
>0a76	aa aa				USER .WORD $AAAA   ;CHECKSUM VALUE
>0a78	aa aa				OFFSET .WORD $AAAA ;LOAD OFFSET
>0a7a	aa				NUMBYT .BYTE $AA   ;NUMBER BYTES
>0a7b	aa aa				RECORD .WORD $AAAA ;RECORD NUMBER
>0a7d	aa				COUNT .BYTE $AA    ;COUNTER
>0a7e	aa				TEMP .BYTE $AA     ;TEMPOARY
>0a7f	aa aa aa aa aa aa		BUF .BYTE $AA,$AA,$AA,$AA,$AA,$AA
>0a85	aa aa aa aa aa aa		.BYTE $AA,$AA,$AA,$AA,$AA,$AA
>0a8b	aa aa aa aa aa aa		.BYTE $AA,$AA,$AA,$AA,$AA,$AA
>0a91	aa				COUNT1 .BYTE $AA   ;COUNTER
>0a92	0d				MSG1 .BYTE $0D
>0a93	42 41 44 20 52 45 43 4f		.TEXT 'BAD RECORD COUN',$D4
>0a9b	52 44 20 43 4f 55 4e d4
>0aa3	0d				MSG2 .BYTE $0D
>0aa4	42 52 45 41 4b 8d		.TEXT 'BREAK',$8D
>0aaa	0d				MSG3 .BYTE $0D
>0aab	45 4e 44 20 4f 46 20 4c		.TEXT 'END OF LOA',$C4
>0ab3	4f 41 c4
>0ab6	0d				MSG4 .BYTE $0D
>0ab7	4e 4f 4e 2d 52 41 4d 20		.TEXT 'NON-RAM LOA',$C4
>0abf	4c 4f 41 c4
>0ac3	0d				MSG5 .BYTE $0D
>0ac4	43 48 45 43 4b 53 55 4d		.TEXT 'CHECKSUM ERRO',$D2
>0acc	20 45 52 52 4f d2
>0ad2	0d				MSG6 .BYTE $0D
>0ad3	46 49 4c 45 20 45 52 52		.TEXT 'FILE ERRO',$D2
>0adb	4f d2
>0add	0d 0d 0d			MSG7 .BYTE $0D,$0D,$0D
>0ae0	4c 4f				.BYTE TITLE1,TITLE2
>0ae2	4c 4f 41 44 2e 43 36 34		.TEXT 'LOAD.C64 V072882'
>0aea	20 56 30 37 32 38 38 32
>0af2	0d				.BYTE $0D
>0af3	28 43 29 20 31 39 38 32		.TEXT '(C) 1982 BY COMMODORE BUSINESS '
>0afb	20 42 59 20 43 4f 4d 4d 4f 44 4f 52 45 20 42 55
>0b0b	53 49 4e 45 53 53 20
>0b12	4d 41 43 48 49 4e 45 53		.TEXT 'MACHINES'
>0b1a	3f a0				.TEXT '?',$A0
>0b1c	0d				MSG8 .BYTE $0D
>0b1d	4f 42 4a 45 43 54 20 46		.TEXT 'OBJECT FILE NAME ?',$A0
>0b25	49 4c 45 20 4e 41 4d 45 20 3f a0
>0b30	0d				MSG9 .BYTE $0D
>0b31	50 52 47 20 4e 41 4d 45		.TEXT 'PRG NAME',$BA
>0b39	ba
>0b3a	0d				MSG10 .BYTE $0D
>0b3b	4f 42 4a 20 4e 4f 54 20		.TEXT 'OBJ NOT SAVED',$A0
>0b43	53 41 56 45 44 a0
>0b49	aa aa				SAV   .WORD $AAAA ;ADDRESS SAVE
>0b4b	aa aa				SA    .WORD $AAAA ;START ADDRESS
>0b4d	aa aa				EA    .WORD $AAAA ;END ADDRESS
>0b4f	00				SAFG  .BYTE $00   ;START ADDRESS FLAG
>0b50	00				ECODE .BYTE $00   ;ERROR CODE

;******  Processing file: savobj.asm

=$0b51					SAVOBJ =*
.0b51	a2 9e		ldx #$9e	 LDX #MSG9-MSG1  ;OFFSET FOR MSG
.0b53	20 d5 09	jsr $09d5	 JSR PRINT       ;PRG NAME:
.0b56	20 95 0b	jsr $0b95	 JSR INSTNF
.0b59	ad 7f 0a	lda $0a7f	 LDA BUF
.0b5c	c9 0d		cmp #$0d	 CMP #$0D
.0b5e	d0 06		bne $0b66	 BNE PFILE0
.0b60	a2 a8		ldx #$a8	 LDX #MSG10-MSG1 ;OFFSET FOR MSG
.0b62	20 d5 09	jsr $09d5	 JSR PRINT       ;PRINT OBJ NOT SAVED
.0b65	60		rts		 RTS
.0b66	a2 00		ldx #$00	PFILE0 LDX #$00
.0b68	bd 7e 0b	lda $0b7e,x	PFILE1 LDA PROGM,X
.0b6b	99 7f 0a	sta $0a7f,y	 STA BUF,Y
.0b6e	c8		iny		 INY
.0b6f	e8		inx		 INX
.0b70	e0 04		cpx #$04	 CPX #$04
.0b72	d0 f4		bne $0b68	 BNE PFILE1
.0b74	8c 82 0b	sty $0b82	 STY SAVA ; LENGTH OF FILE NAME
.0b77	20 83 0b	jsr $0b83	 JSR ADDONE
.0b7a	20 a4 0b	jsr $0ba4	 JSR SVFILE
.0b7d	60		rts		 RTS
>0b7e	2c 50 2c 57			PROGM .TEXT ',P,W'
>0b82	aa				SAVA .BYTE $AA
=$0b83					ADDONE =*
.0b83	18		clc		 CLC ; CLEAR CARRY
.0b84	ad 4d 0b	lda $0b4d	 LDA EA
.0b87	69 01		adc #$01	 ADC #$01
.0b89	8d 4d 0b	sta $0b4d	 STA EA ; STORE SUM OF LSBS
.0b8c	ad 4e 0b	lda $0b4e	 LDA EA+1
.0b8f	69 00		adc #$00	 ADC #$00 ; ADD THE MSBS USING CARRY FROM
.0b91	8d 4e 0b	sta $0b4e	 STA EA+1 ; THE PREVIOUS CALCULATION
.0b94	60		rts		 RTS
.0b95	a0 00		ldy #$00	INSTNF LDY #$00
.0b97	20 cf ff	jsr $ffcf	INSTN2 JSR CHRIN
.0b9a	99 7f 0a	sta $0a7f,y	 STA BUF,Y
.0b9d	c8		iny		 INY
.0b9e	c9 0d		cmp #$0d	 CMP #$0D
.0ba0	d0 f5		bne $0b97	 BNE INSTN2
.0ba2	88		dey		 DEY
.0ba3	60		rts		 RTS
.0ba4	ad 82 0b	lda $0b82	SVFILE LDA SAVA ; LENGHT OF FILE NAME
.0ba7	a2 7f		ldx #$7f	 LDX #<BUF
.0ba9	a0 0a		ldy #$0a	 LDY #>BUF
.0bab	20 bd ff	jsr $ffbd	 JSR SETNAM
.0bae	a9 00		lda #$00	 LDA #$00
.0bb0	a2 08		ldx #$08	 LDX #$08
.0bb2	a0 01		ldy #$01	 LDY #$01
.0bb4	20 ba ff	jsr $ffba	 JSR SETLFS
.0bb7	ad 4b 0b	lda $0b4b	 LDA SA
.0bba	85 fd		sta $fd		 STA ZEROUR   ;WAS $2B
.0bbc	ad 4c 0b	lda $0b4c	 LDA SA+1
.0bbf	85 fe		sta $fe		 STA ZEROUR+1 ;WAS $2C
.0bc1	a9 fd		lda #$fd	 LDA #ZEROUR ; zero-page index to the pointer
.0bc3	ae 4d 0b	ldx $0b4d	 LDX EA
.0bc6	ac 4e 0b	ldy $0b4e	 LDY EA+1
.0bc9	20 d8 ff	jsr $ffd8	 JSR SAVE
.0bcc	90 05		bcc $0bd3	 BCC OKSAV ; CARRY CLEAR = OK
.0bce	a2 a8		ldx #$a8	 LDX #MSG10-MSG1 ;OFFSET FOR MSG
.0bd0	20 d5 09	jsr $09d5	 JSR PRINT       ;PRINT OBJ NOT SAVED
=$0bd3					OKSAV =*
.0bd3	a9 08		lda #$08	 LDA #$08
.0bd5	20 c3 ff	jsr $ffc3	 JSR CLOSE
.0bd8	60		rts		 RTS

;******  Return to file: loader.asm


;******  Return to file: loloader.asm


;******  End of listing
